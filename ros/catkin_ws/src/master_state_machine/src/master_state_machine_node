#!/usr/bin/env python

import rospy
import smach_ros
from smach import StateMachine, Concurrence, UserData
from state_functions import *

def main():
    rospy.init_node('master_state_machine')

    sm = StateMachine(outcomes=["succeeded", "preempted", "aborted"])

    with sm:
        StateMachine.add("RESET_ROBOT", build_reset_state(),
                                {"succeeded": "LOAD_INITIAL_BALL"})
        StateMachine.add("LOAD_INITIAL_BALL", build_load_initial_ball_state(),
                                {"succeeded": "PICKUP_LEFT_BALL"})
        StateMachine.add("PICKUP_LEFT_BALL", build_pickup_left_ball_state(),
                                {"succeeded": "PICKUP_MIDDLE_RIGHT_BALLS"})
        StateMachine.add("PICKUP_MIDDLE_RIGHT_BALLS", build_pickup_middle_right_balls_state(),
                                {"succeeded": "PICKUP_AREA_BALLS"})
        StateMachine.add("PICKUP_AREA_BALLS", build_pickup_area_balls_state(),
                                {"succeeded": "PICKUP_AREA_BALLS"})

        # StateMachine.add("TEMP_LINE_FIELD", drive_pose(0.661, 0.833, 90, 0.01, 1), {"succeeded": "DELAY"})
        # StateMachine.add("DELAY", Delay(5), {"succeeded": "HOME"})
        # StateMachine.add("HOME", drive_pose(1.2, 0.2, 90, 0.01, 1), {"succeeded": "RESET_ROBOT"})

    introspection_server = smach_ros.IntrospectionServer('smach_server', sm, '/SM_ROOT')
    introspection_server.start()
    sm.execute()
    introspection_server.stop()

def build_load_initial_ball_state():
    sm = StateMachine(outcomes=["succeeded", "preempted", "aborted"])

    grabber_frame = "right_grabber"
    distance_limit = 0.02

    with sm:
        StateMachine.add("DETECT_CLOSEST_BALL", closest_ball(grabber_frame, distance_limit),
            {"succeeded": "CLOSE_GRABBER", "aborted": "DETECT_CLOSEST_BALL"},
            remapping={"position": "ball_location"})
        StateMachine.add("CLOSE_GRABBER", grab(grabber_frame), {"succeeded": "succeeded"})
    return sm

def build_pickup_left_ball_state():
    sm = StateMachine(outcomes = ["succeeded", "preempted", "aborted"])

    with sm:
        StateMachine.add("DRIVE_START_FORWARD", drive_pose(1.2, 0.73, 133, 0.3, 30), {"succeeded": "DRIVE_LEFT_FIELD"})
        StateMachine.add("DRIVE_LEFT_FIELD", drive_pose(1.04, 0.95, 133, 0.05, 5), {"succeeded": "GRAB_BALL"})
        StateMachine.add("GRAB_BALL", build_pickup_state("left_grabber", 3, 3), {"succeeded": "DROP_BUCKET"})
        StateMachine.add("DROP_BUCKET", build_bucket_drop_state())
    return sm

def build_pickup_middle_right_balls_state():
    sm = StateMachine(outcomes = ["succeeded", "preempted", "aborted"])

    with sm:
        StateMachine.add("DRIVE_MIDDLE_FIELD", drive_pose(1.2, 1.63, -90, 0.03, 20), {"succeeded": "GRAB_BALL_MIDDLE"})
        StateMachine.add("GRAB_BALL_MIDDLE", build_pickup_state("right_grabber", 3, 3), {"succeeded": "DRIVE_MIDDLE_FIELD_2"})
        StateMachine.add("DRIVE_MIDDLE_FIELD_2", drive_pose(1.2, 1.63, -90, 0.05, 5), {"succeeded": "DRIVE_RIGHT_FIELD"})
        StateMachine.add("DRIVE_RIGHT_FIELD", drive_pose(1.7, 1.63, -90, 0.03, 20), {"succeeded": "GRAB_BALL_RIGHT"})
        StateMachine.add("GRAB_BALL_RIGHT", build_pickup_state("left_grabber", 3, 3), {"succeeded": "DROP_BUCKET"})
        StateMachine.add("DROP_BUCKET", build_bucket_drop_state())
    return sm

def build_pickup_area_balls_state():
    sm = StateMachine(outcomes = ["succeeded", "preempted", "aborted"])

    with sm:
        StateMachine.add("BALL_AREA_VERTICAL_RIGHT_1", drive_pose(0.495, 1.095, -90, 0.05, 5), {"succeeded": "GRAB_BALL_RIGHT_1"})
        StateMachine.add("GRAB_BALL_RIGHT_1", build_pickup_state("right_grabber", 0.25, 1), {"succeeded": "GRAB_BALL_LEFT_1", "aborted": "BALL_AREA_VERTICAL_RIGHT_2"})
        StateMachine.add("BALL_AREA_VERTICAL_RIGHT_2", drive_pose(0.495, 0.855, -90, 0.05, 5), {"succeeded": "GRAB_BALL_RIGHT_2"})
        StateMachine.add("GRAB_BALL_RIGHT_2", build_pickup_state("right_grabber", 0.25, 1), {"succeeded": "GRAB_BALL_LEFT_2", "aborted": "BALL_AREA_VERTICAL_RIGHT_3"})
        StateMachine.add("BALL_AREA_VERTICAL_RIGHT_3", drive_pose(0.495, 0.608, -90, 0.05, 5), {"succeeded": "GRAB_BALL_RIGHT_3"})
        StateMachine.add("GRAB_BALL_RIGHT_3", build_pickup_state("right_grabber", 0.25, 1), {"succeeded": "GRAB_BALL_LEFT_3", "aborted": "BALL_AREA_VERTICAL_RIGHT_1"})

        StateMachine.add("BALL_AREA_VERTICAL_LEFT_1", drive_pose(0.495, 1.095, -90, 0.05, 5), {"succeeded": "GRAB_BALL_LEFT_1"})
        StateMachine.add("GRAB_BALL_LEFT_1", build_pickup_state("left_grabber", 0.25, 1), {"succeeded": "DROP_BUCKET", "aborted": "BALL_AREA_VERTICAL_LEFT_2"})
        StateMachine.add("BALL_AREA_VERTICAL_LEFT_2", drive_pose(0.495, 0.855, -90, 0.05, 5), {"succeeded": "GRAB_BALL_LEFT_2"})
        StateMachine.add("GRAB_BALL_LEFT_2", build_pickup_state("left_grabber", 0.25, 1), {"succeeded": "DROP_BUCKET", "aborted": "BALL_AREA_VERTICAL_LEFT_3"})
        StateMachine.add("BALL_AREA_VERTICAL_LEFT_3", drive_pose(0.495, 0.608, -90, 0.05, 5), {"succeeded": "GRAB_BALL_LEFT_3"})
        StateMachine.add("GRAB_BALL_LEFT_3", build_pickup_state("left_grabber", 0.25, 1), {"succeeded": "DROP_BUCKET", "aborted": "BALL_AREA_VERTICAL_LEFT_1"})

        StateMachine.add("DROP_BUCKET", build_bucket_drop_state())
    return sm

if __name__ == "__main__":
    main()
