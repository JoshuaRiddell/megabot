
base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000434c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  080044d4  080044d4  000144d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004738  08004738  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004738  08004738  00014738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004740  08004740  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004740  08004740  00014740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004748  08004748  00014748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800474c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a0c  20000074  080047c0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a80  080047c0  00020a80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d60d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002226  00000000  00000000  0002d6b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000990  00000000  00000000  0002f8d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008c0  00000000  00000000  00030268  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000220d1  00000000  00000000  00030b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000080de  00000000  00000000  00052bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c7f6c  00000000  00000000  0005acd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00122c43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a5c  00000000  00000000  00122cc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080044bc 	.word	0x080044bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	080044bc 	.word	0x080044bc

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	0a5a      	lsrs	r2, r3, #9
 80004e8:	490f      	ldr	r1, [pc, #60]	; (8000528 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80004ea:	fba1 1202 	umull	r1, r2, r1, r2
 80004ee:	09d2      	lsrs	r2, r2, #7
 80004f0:	490e      	ldr	r1, [pc, #56]	; (800052c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80004f2:	fb01 f202 	mul.w	r2, r1, r2
 80004f6:	1a9b      	subs	r3, r3, r2
 80004f8:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	0a5b      	lsrs	r3, r3, #9
 8000500:	4a09      	ldr	r2, [pc, #36]	; (8000528 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000502:	fba2 2303 	umull	r2, r3, r2, r3
 8000506:	09db      	lsrs	r3, r3, #7
 8000508:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	441a      	add	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	68fa      	ldr	r2, [r7, #12]
 800051a:	601a      	str	r2, [r3, #0]
}
 800051c:	bf00      	nop
 800051e:	3714      	adds	r7, #20
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr
 8000528:	00044b83 	.word	0x00044b83
 800052c:	3b9aca00 	.word	0x3b9aca00

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setup();
 8000534:	f001 f8f8 	bl	8001728 <setup>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000538:	f002 f870 	bl	800261c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053c:	f000 f808 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000540:	f000 f8c4 	bl	80006cc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000544:	f000 f86e 	bl	8000624 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000548:	f000 f896 	bl	8000678 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800054c:	e7fe      	b.n	800054c <main+0x1c>
	...

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b094      	sub	sp, #80	; 0x50
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0320 	add.w	r3, r7, #32
 800055a:	2230      	movs	r2, #48	; 0x30
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f003 fe6f 	bl	8004242 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000574:	2300      	movs	r3, #0
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	4b28      	ldr	r3, [pc, #160]	; (800061c <SystemClock_Config+0xcc>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	4a27      	ldr	r2, [pc, #156]	; (800061c <SystemClock_Config+0xcc>)
 800057e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000582:	6413      	str	r3, [r2, #64]	; 0x40
 8000584:	4b25      	ldr	r3, [pc, #148]	; (800061c <SystemClock_Config+0xcc>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	4b22      	ldr	r3, [pc, #136]	; (8000620 <SystemClock_Config+0xd0>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a21      	ldr	r2, [pc, #132]	; (8000620 <SystemClock_Config+0xd0>)
 800059a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800059e:	6013      	str	r3, [r2, #0]
 80005a0:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <SystemClock_Config+0xd0>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ac:	2301      	movs	r3, #1
 80005ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b6:	2302      	movs	r3, #2
 80005b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005c0:	2304      	movs	r3, #4
 80005c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005c4:	23a8      	movs	r3, #168	; 0xa8
 80005c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005cc:	2304      	movs	r3, #4
 80005ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 0320 	add.w	r3, r7, #32
 80005d4:	4618      	mov	r0, r3
 80005d6:	f002 fbb5 	bl	8002d44 <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005e0:	f000 f89c 	bl	800071c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e4:	230f      	movs	r3, #15
 80005e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e8:	2302      	movs	r3, #2
 80005ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2105      	movs	r1, #5
 8000602:	4618      	mov	r0, r3
 8000604:	f002 fe0e 	bl	8003224 <HAL_RCC_ClockConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800060e:	f000 f885 	bl	800071c <Error_Handler>
  }
}
 8000612:	bf00      	nop
 8000614:	3750      	adds	r7, #80	; 0x50
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40023800 	.word	0x40023800
 8000620:	40007000 	.word	0x40007000

08000624 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_USART1_UART_Init+0x4c>)
 800062a:	4a12      	ldr	r2, [pc, #72]	; (8000674 <MX_USART1_UART_Init+0x50>)
 800062c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <MX_USART1_UART_Init+0x4c>)
 8000630:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000634:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_USART1_UART_Init+0x4c>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_USART1_UART_Init+0x4c>)
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <MX_USART1_UART_Init+0x4c>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_USART1_UART_Init+0x4c>)
 800064a:	220c      	movs	r2, #12
 800064c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <MX_USART1_UART_Init+0x4c>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_USART1_UART_Init+0x4c>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <MX_USART1_UART_Init+0x4c>)
 800065c:	f002 ffd4 	bl	8003608 <HAL_UART_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000666:	f000 f859 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	200009f8 	.word	0x200009f8
 8000674:	40011000 	.word	0x40011000

08000678 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 800067e:	4a12      	ldr	r2, [pc, #72]	; (80006c8 <MX_USART2_UART_Init+0x50>)
 8000680:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 8000684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000688:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 80006b0:	f002 ffaa 	bl	8003608 <HAL_UART_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ba:	f000 f82f 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000a38 	.word	0x20000a38
 80006c8:	40004400 	.word	0x40004400

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <MX_GPIO_Init+0x4c>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a0f      	ldr	r2, [pc, #60]	; (8000718 <MX_GPIO_Init+0x4c>)
 80006dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <MX_GPIO_Init+0x4c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_GPIO_Init+0x4c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a08      	ldr	r2, [pc, #32]	; (8000718 <MX_GPIO_Init+0x4c>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_GPIO_Init+0x4c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]

}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800

0800071c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800072a:	b480      	push	{r7}
 800072c:	b083      	sub	sp, #12
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2200      	movs	r2, #0
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4618      	mov	r0, r3
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	4a04      	ldr	r2, [pc, #16]	; (8000768 <_ZN3ros3MsgC1Ev+0x1c>)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4618      	mov	r0, r3
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr
 8000768:	08004710 	.word	0x08004710

0800076c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
      data()
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ffe8 	bl	800074c <_ZN3ros3MsgC1Ev>
 800077c:	4a06      	ldr	r2, [pc, #24]	; (8000798 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	3304      	adds	r3, #4
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff ffcf 	bl	800072a <_ZN3ros4TimeC1Ev>
    {
    }
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4618      	mov	r0, r3
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	080046f8 	.word	0x080046f8

0800079c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	6859      	ldr	r1, [r3, #4]
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	683a      	ldr	r2, [r7, #0]
 80007b2:	4413      	add	r3, r2
 80007b4:	b2ca      	uxtb	r2, r1
 80007b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	0a19      	lsrs	r1, r3, #8
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	3301      	adds	r3, #1
 80007c2:	683a      	ldr	r2, [r7, #0]
 80007c4:	4413      	add	r3, r2
 80007c6:	b2ca      	uxtb	r2, r1
 80007c8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	0c19      	lsrs	r1, r3, #16
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	3302      	adds	r3, #2
 80007d4:	683a      	ldr	r2, [r7, #0]
 80007d6:	4413      	add	r3, r2
 80007d8:	b2ca      	uxtb	r2, r1
 80007da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	0e19      	lsrs	r1, r3, #24
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	3303      	adds	r3, #3
 80007e6:	683a      	ldr	r2, [r7, #0]
 80007e8:	4413      	add	r3, r2
 80007ea:	b2ca      	uxtb	r2, r1
 80007ec:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	3304      	adds	r3, #4
 80007f2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	6899      	ldr	r1, [r3, #8]
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	683a      	ldr	r2, [r7, #0]
 80007fc:	4413      	add	r3, r2
 80007fe:	b2ca      	uxtb	r2, r1
 8000800:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	689b      	ldr	r3, [r3, #8]
 8000806:	0a19      	lsrs	r1, r3, #8
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	3301      	adds	r3, #1
 800080c:	683a      	ldr	r2, [r7, #0]
 800080e:	4413      	add	r3, r2
 8000810:	b2ca      	uxtb	r2, r1
 8000812:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	689b      	ldr	r3, [r3, #8]
 8000818:	0c19      	lsrs	r1, r3, #16
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	3302      	adds	r3, #2
 800081e:	683a      	ldr	r2, [r7, #0]
 8000820:	4413      	add	r3, r2
 8000822:	b2ca      	uxtb	r2, r1
 8000824:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	0e19      	lsrs	r1, r3, #24
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	3303      	adds	r3, #3
 8000830:	683a      	ldr	r2, [r7, #0]
 8000832:	4413      	add	r3, r2
 8000834:	b2ca      	uxtb	r2, r1
 8000836:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	3304      	adds	r3, #4
 800083c:	60fb      	str	r3, [r7, #12]
      return offset;
 800083e:	68fb      	ldr	r3, [r7, #12]
    }
 8000840:	4618      	mov	r0, r3
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	683a      	ldr	r2, [r7, #0]
 800085e:	4413      	add	r3, r2
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	461a      	mov	r2, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	685a      	ldr	r2, [r3, #4]
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	3301      	adds	r3, #1
 8000870:	6839      	ldr	r1, [r7, #0]
 8000872:	440b      	add	r3, r1
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	021b      	lsls	r3, r3, #8
 8000878:	431a      	orrs	r2, r3
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	685a      	ldr	r2, [r3, #4]
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	3302      	adds	r3, #2
 8000886:	6839      	ldr	r1, [r7, #0]
 8000888:	440b      	add	r3, r1
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	041b      	lsls	r3, r3, #16
 800088e:	431a      	orrs	r2, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	685a      	ldr	r2, [r3, #4]
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	3303      	adds	r3, #3
 800089c:	6839      	ldr	r1, [r7, #0]
 800089e:	440b      	add	r3, r1
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	061b      	lsls	r3, r3, #24
 80008a4:	431a      	orrs	r2, r3
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	3304      	adds	r3, #4
 80008ae:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	683a      	ldr	r2, [r7, #0]
 80008b4:	4413      	add	r3, r2
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	461a      	mov	r2, r3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	689a      	ldr	r2, [r3, #8]
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	3301      	adds	r3, #1
 80008c6:	6839      	ldr	r1, [r7, #0]
 80008c8:	440b      	add	r3, r1
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	021b      	lsls	r3, r3, #8
 80008ce:	431a      	orrs	r2, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	689a      	ldr	r2, [r3, #8]
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	3302      	adds	r3, #2
 80008dc:	6839      	ldr	r1, [r7, #0]
 80008de:	440b      	add	r3, r1
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	041b      	lsls	r3, r3, #16
 80008e4:	431a      	orrs	r2, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	689a      	ldr	r2, [r3, #8]
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	3303      	adds	r3, #3
 80008f2:	6839      	ldr	r1, [r7, #0]
 80008f4:	440b      	add	r3, r1
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	061b      	lsls	r3, r3, #24
 80008fa:	431a      	orrs	r2, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	3304      	adds	r3, #4
 8000904:	60fb      	str	r3, [r7, #12]
     return offset;
 8000906:	68fb      	ldr	r3, [r7, #12]
    }
 8000908:	4618      	mov	r0, r3
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	4b03      	ldr	r3, [pc, #12]	; (800092c <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800091e:	4618      	mov	r0, r3
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	080044d4 	.word	0x080044d4

08000930 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	4b03      	ldr	r3, [pc, #12]	; (8000948 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800093a:	4618      	mov	r0, r3
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	080044e4 	.word	0x080044e4

0800094c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff fef8 	bl	800074c <_ZN3ros3MsgC1Ev>
 800095c:	4a0b      	ldr	r2, [pc, #44]	; (800098c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2200      	movs	r2, #0
 8000966:	809a      	strh	r2, [r3, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4a09      	ldr	r2, [pc, #36]	; (8000990 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a07      	ldr	r2, [pc, #28]	; (8000990 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000972:	60da      	str	r2, [r3, #12]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4a06      	ldr	r2, [pc, #24]	; (8000990 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000978:	611a      	str	r2, [r3, #16]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2200      	movs	r2, #0
 800097e:	615a      	str	r2, [r3, #20]
    {
    }
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	080046e0 	.word	0x080046e0
 8000990:	08004508 	.word	0x08004508

08000994 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000994:	b580      	push	{r7, lr}
 8000996:	b088      	sub	sp, #32
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	8899      	ldrh	r1, [r3, #4]
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	683a      	ldr	r2, [r7, #0]
 80009aa:	4413      	add	r3, r2
 80009ac:	b2ca      	uxtb	r2, r1
 80009ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	889b      	ldrh	r3, [r3, #4]
 80009b4:	0a1b      	lsrs	r3, r3, #8
 80009b6:	b299      	uxth	r1, r3
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	3301      	adds	r3, #1
 80009bc:	683a      	ldr	r2, [r7, #0]
 80009be:	4413      	add	r3, r2
 80009c0:	b2ca      	uxtb	r2, r1
 80009c2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	3302      	adds	r3, #2
 80009c8:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fbfa 	bl	80001c8 <strlen>
 80009d4:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	683a      	ldr	r2, [r7, #0]
 80009da:	4413      	add	r3, r2
 80009dc:	69b9      	ldr	r1, [r7, #24]
 80009de:	4618      	mov	r0, r3
 80009e0:	f000 fec0 	bl	8001764 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80009e4:	69fb      	ldr	r3, [r7, #28]
 80009e6:	3304      	adds	r3, #4
 80009e8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	683a      	ldr	r2, [r7, #0]
 80009ee:	18d0      	adds	r0, r2, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	689b      	ldr	r3, [r3, #8]
 80009f4:	69ba      	ldr	r2, [r7, #24]
 80009f6:	4619      	mov	r1, r3
 80009f8:	f003 fc18 	bl	800422c <memcpy>
      offset += length_topic_name;
 80009fc:	69fa      	ldr	r2, [r7, #28]
 80009fe:	69bb      	ldr	r3, [r7, #24]
 8000a00:	4413      	add	r3, r2
 8000a02:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff fbdd 	bl	80001c8 <strlen>
 8000a0e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	683a      	ldr	r2, [r7, #0]
 8000a14:	4413      	add	r3, r2
 8000a16:	6979      	ldr	r1, [r7, #20]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f000 fea3 	bl	8001764 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	3304      	adds	r3, #4
 8000a22:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000a24:	69fb      	ldr	r3, [r7, #28]
 8000a26:	683a      	ldr	r2, [r7, #0]
 8000a28:	18d0      	adds	r0, r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	68db      	ldr	r3, [r3, #12]
 8000a2e:	697a      	ldr	r2, [r7, #20]
 8000a30:	4619      	mov	r1, r3
 8000a32:	f003 fbfb 	bl	800422c <memcpy>
      offset += length_message_type;
 8000a36:	69fa      	ldr	r2, [r7, #28]
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	691b      	ldr	r3, [r3, #16]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fbc0 	bl	80001c8 <strlen>
 8000a48:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	683a      	ldr	r2, [r7, #0]
 8000a4e:	4413      	add	r3, r2
 8000a50:	6939      	ldr	r1, [r7, #16]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 fe86 	bl	8001764 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000a58:	69fb      	ldr	r3, [r7, #28]
 8000a5a:	3304      	adds	r3, #4
 8000a5c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	683a      	ldr	r2, [r7, #0]
 8000a62:	18d0      	adds	r0, r2, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	691b      	ldr	r3, [r3, #16]
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	f003 fbde 	bl	800422c <memcpy>
      offset += length_md5sum;
 8000a70:	69fa      	ldr	r2, [r7, #28]
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	4413      	add	r3, r2
 8000a76:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	695b      	ldr	r3, [r3, #20]
 8000a7c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8000a7e:	68f9      	ldr	r1, [r7, #12]
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	683a      	ldr	r2, [r7, #0]
 8000a84:	4413      	add	r3, r2
 8000a86:	b2ca      	uxtb	r2, r1
 8000a88:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	0a19      	lsrs	r1, r3, #8
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	3301      	adds	r3, #1
 8000a92:	683a      	ldr	r2, [r7, #0]
 8000a94:	4413      	add	r3, r2
 8000a96:	b2ca      	uxtb	r2, r1
 8000a98:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	0c19      	lsrs	r1, r3, #16
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	3302      	adds	r3, #2
 8000aa2:	683a      	ldr	r2, [r7, #0]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	b2ca      	uxtb	r2, r1
 8000aa8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	0e19      	lsrs	r1, r3, #24
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	3303      	adds	r3, #3
 8000ab2:	683a      	ldr	r2, [r7, #0]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	b2ca      	uxtb	r2, r1
 8000ab8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	3304      	adds	r3, #4
 8000abe:	61fb      	str	r3, [r7, #28]
      return offset;
 8000ac0:	69fb      	ldr	r3, [r7, #28]
    }
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3720      	adds	r7, #32
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b08a      	sub	sp, #40	; 0x28
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
 8000ad2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	683a      	ldr	r2, [r7, #0]
 8000adc:	4413      	add	r3, r2
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	889b      	ldrh	r3, [r3, #4]
 8000aea:	b21a      	sxth	r2, r3
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	3301      	adds	r3, #1
 8000af0:	6839      	ldr	r1, [r7, #0]
 8000af2:	440b      	add	r3, r1
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	021b      	lsls	r3, r3, #8
 8000af8:	b21b      	sxth	r3, r3
 8000afa:	4313      	orrs	r3, r2
 8000afc:	b21b      	sxth	r3, r3
 8000afe:	b29a      	uxth	r2, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000b04:	69bb      	ldr	r3, [r7, #24]
 8000b06:	3302      	adds	r3, #2
 8000b08:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000b0a:	69bb      	ldr	r3, [r7, #24]
 8000b0c:	683a      	ldr	r2, [r7, #0]
 8000b0e:	441a      	add	r2, r3
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4611      	mov	r1, r2
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 fe42 	bl	80017a0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	3304      	adds	r3, #4
 8000b20:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
 8000b26:	69ba      	ldr	r2, [r7, #24]
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d20c      	bcs.n	8000b4c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8000b32:	683a      	ldr	r2, [r7, #0]
 8000b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b36:	441a      	add	r2, r3
 8000b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	6839      	ldr	r1, [r7, #0]
 8000b3e:	440b      	add	r3, r1
 8000b40:	7812      	ldrb	r2, [r2, #0]
 8000b42:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b46:	3301      	adds	r3, #1
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
 8000b4a:	e7ec      	b.n	8000b26 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000b4c:	69ba      	ldr	r2, [r7, #24]
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	4413      	add	r3, r2
 8000b52:	3b01      	subs	r3, #1
 8000b54:	683a      	ldr	r2, [r7, #0]
 8000b56:	4413      	add	r3, r2
 8000b58:	2200      	movs	r2, #0
 8000b5a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	683a      	ldr	r2, [r7, #0]
 8000b62:	441a      	add	r2, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000b68:	69ba      	ldr	r2, [r7, #24]
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	683a      	ldr	r2, [r7, #0]
 8000b74:	441a      	add	r2, r3
 8000b76:	f107 0310 	add.w	r3, r7, #16
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f000 fe0f 	bl	80017a0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	3304      	adds	r3, #4
 8000b86:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	623b      	str	r3, [r7, #32]
 8000b8c:	69ba      	ldr	r2, [r7, #24]
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	4413      	add	r3, r2
 8000b92:	6a3a      	ldr	r2, [r7, #32]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d20c      	bcs.n	8000bb2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8000b98:	683a      	ldr	r2, [r7, #0]
 8000b9a:	6a3b      	ldr	r3, [r7, #32]
 8000b9c:	441a      	add	r2, r3
 8000b9e:	6a3b      	ldr	r3, [r7, #32]
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	6839      	ldr	r1, [r7, #0]
 8000ba4:	440b      	add	r3, r1
 8000ba6:	7812      	ldrb	r2, [r2, #0]
 8000ba8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000baa:	6a3b      	ldr	r3, [r7, #32]
 8000bac:	3301      	adds	r3, #1
 8000bae:	623b      	str	r3, [r7, #32]
 8000bb0:	e7ec      	b.n	8000b8c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8000bb2:	69ba      	ldr	r2, [r7, #24]
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	3b01      	subs	r3, #1
 8000bba:	683a      	ldr	r2, [r7, #0]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	683a      	ldr	r2, [r7, #0]
 8000bc8:	441a      	add	r2, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8000bce:	69ba      	ldr	r2, [r7, #24]
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	683a      	ldr	r2, [r7, #0]
 8000bda:	441a      	add	r2, r3
 8000bdc:	f107 030c 	add.w	r3, r7, #12
 8000be0:	4611      	mov	r1, r2
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 fddc 	bl	80017a0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	3304      	adds	r3, #4
 8000bec:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	61fb      	str	r3, [r7, #28]
 8000bf2:	69ba      	ldr	r2, [r7, #24]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	69fa      	ldr	r2, [r7, #28]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d20c      	bcs.n	8000c18 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8000bfe:	683a      	ldr	r2, [r7, #0]
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	441a      	add	r2, r3
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	6839      	ldr	r1, [r7, #0]
 8000c0a:	440b      	add	r3, r1
 8000c0c:	7812      	ldrb	r2, [r2, #0]
 8000c0e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	3301      	adds	r3, #1
 8000c14:	61fb      	str	r3, [r7, #28]
 8000c16:	e7ec      	b.n	8000bf2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000c18:	69ba      	ldr	r2, [r7, #24]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	683a      	ldr	r2, [r7, #0]
 8000c22:	4413      	add	r3, r2
 8000c24:	2200      	movs	r2, #0
 8000c26:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	683a      	ldr	r2, [r7, #0]
 8000c2e:	441a      	add	r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	4413      	add	r3, r2
 8000c3a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	6839      	ldr	r1, [r7, #0]
 8000c46:	440a      	add	r2, r1
 8000c48:	7812      	ldrb	r2, [r2, #0]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	3301      	adds	r3, #1
 8000c54:	6839      	ldr	r1, [r7, #0]
 8000c56:	440b      	add	r3, r1
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	021b      	lsls	r3, r3, #8
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000c60:	68ba      	ldr	r2, [r7, #8]
 8000c62:	69bb      	ldr	r3, [r7, #24]
 8000c64:	3302      	adds	r3, #2
 8000c66:	6839      	ldr	r1, [r7, #0]
 8000c68:	440b      	add	r3, r1
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	041b      	lsls	r3, r3, #16
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	3303      	adds	r3, #3
 8000c78:	6839      	ldr	r1, [r7, #0]
 8000c7a:	440b      	add	r3, r1
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	061b      	lsls	r3, r3, #24
 8000c80:	4313      	orrs	r3, r2
 8000c82:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000c84:	68ba      	ldr	r2, [r7, #8]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	61bb      	str	r3, [r7, #24]
     return offset;
 8000c90:	69bb      	ldr	r3, [r7, #24]
    }
 8000c92:	4618      	mov	r0, r3
 8000c94:	3728      	adds	r7, #40	; 0x28
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	4b03      	ldr	r3, [pc, #12]	; (8000cb4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	0800450c 	.word	0x0800450c

08000cb8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	08004528 	.word	0x08004528

08000cd4 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fd34 	bl	800074c <_ZN3ros3MsgC1Ev>
 8000ce4:	4a06      	ldr	r2, [pc, #24]	; (8000d00 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2200      	movs	r2, #0
 8000cee:	711a      	strb	r2, [r3, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000cf4:	609a      	str	r2, [r3, #8]
    {
    }
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	080046c8 	.word	0x080046c8
 8000d04:	08004508 	.word	0x08004508

08000d08 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	683a      	ldr	r2, [r7, #0]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	7912      	ldrb	r2, [r2, #4]
 8000d20:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	3301      	adds	r3, #1
 8000d26:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fa4b 	bl	80001c8 <strlen>
 8000d32:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	683a      	ldr	r2, [r7, #0]
 8000d38:	4413      	add	r3, r2
 8000d3a:	68b9      	ldr	r1, [r7, #8]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f000 fd11 	bl	8001764 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	3304      	adds	r3, #4
 8000d46:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	683a      	ldr	r2, [r7, #0]
 8000d4c:	18d0      	adds	r0, r2, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	68ba      	ldr	r2, [r7, #8]
 8000d54:	4619      	mov	r1, r3
 8000d56:	f003 fa69 	bl	800422c <memcpy>
      offset += length_msg;
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	4413      	add	r3, r2
 8000d60:	60fb      	str	r3, [r7, #12]
      return offset;
 8000d62:	68fb      	ldr	r3, [r7, #12]
    }
 8000d64:	4618      	mov	r0, r3
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	683a      	ldr	r2, [r7, #0]
 8000d7e:	4413      	add	r3, r2
 8000d80:	781a      	ldrb	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	683a      	ldr	r2, [r7, #0]
 8000d90:	441a      	add	r2, r3
 8000d92:	f107 030c 	add.w	r3, r7, #12
 8000d96:	4611      	mov	r1, r2
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f000 fd01 	bl	80017a0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	3304      	adds	r3, #4
 8000da2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	4413      	add	r3, r2
 8000dae:	697a      	ldr	r2, [r7, #20]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d20c      	bcs.n	8000dce <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8000db4:	683a      	ldr	r2, [r7, #0]
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	441a      	add	r2, r3
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	3b01      	subs	r3, #1
 8000dbe:	6839      	ldr	r1, [r7, #0]
 8000dc0:	440b      	add	r3, r1
 8000dc2:	7812      	ldrb	r2, [r2, #0]
 8000dc4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	617b      	str	r3, [r7, #20]
 8000dcc:	e7ec      	b.n	8000da8 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	3b01      	subs	r3, #1
 8000dd6:	683a      	ldr	r2, [r7, #0]
 8000dd8:	4413      	add	r3, r2
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	3b01      	subs	r3, #1
 8000de2:	683a      	ldr	r2, [r7, #0]
 8000de4:	441a      	add	r2, r3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	4413      	add	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
     return offset;
 8000df2:	693b      	ldr	r3, [r7, #16]
    }
 8000df4:	4618      	mov	r0, r3
 8000df6:	3718      	adds	r7, #24
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	4b03      	ldr	r3, [pc, #12]	; (8000e14 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8000e06:	4618      	mov	r0, r3
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	0800454c 	.word	0x0800454c

08000e18 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	4b03      	ldr	r3, [pc, #12]	; (8000e30 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8000e22:	4618      	mov	r0, r3
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	08004560 	.word	0x08004560

08000e34 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff fc84 	bl	800074c <_ZN3ros3MsgC1Ev>
 8000e44:	4a0c      	ldr	r2, [pc, #48]	; (8000e78 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	619a      	str	r2, [r3, #24]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	61da      	str	r2, [r3, #28]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4618      	mov	r0, r3
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	080046b0 	.word	0x080046b0

08000e7c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	; 0x28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6859      	ldr	r1, [r3, #4]
 8000e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e90:	683a      	ldr	r2, [r7, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	b2ca      	uxtb	r2, r1
 8000e96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	0a19      	lsrs	r1, r3, #8
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	683a      	ldr	r2, [r7, #0]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	b2ca      	uxtb	r2, r1
 8000ea8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	0c19      	lsrs	r1, r3, #16
 8000eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb2:	3302      	adds	r3, #2
 8000eb4:	683a      	ldr	r2, [r7, #0]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	b2ca      	uxtb	r2, r1
 8000eba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	0e19      	lsrs	r1, r3, #24
 8000ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec4:	3303      	adds	r3, #3
 8000ec6:	683a      	ldr	r2, [r7, #0]
 8000ec8:	4413      	add	r3, r2
 8000eca:	b2ca      	uxtb	r2, r1
 8000ecc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed0:	3304      	adds	r3, #4
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	623b      	str	r3, [r7, #32]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	6a3a      	ldr	r2, [r7, #32]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d22b      	bcs.n	8000f3a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	68da      	ldr	r2, [r3, #12]
 8000ee6:	6a3b      	ldr	r3, [r7, #32]
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4413      	add	r3, r2
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000ef0:	6939      	ldr	r1, [r7, #16]
 8000ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef4:	683a      	ldr	r2, [r7, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	b2ca      	uxtb	r2, r1
 8000efa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	0a19      	lsrs	r1, r3, #8
 8000f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f02:	3301      	adds	r3, #1
 8000f04:	683a      	ldr	r2, [r7, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	b2ca      	uxtb	r2, r1
 8000f0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	0c19      	lsrs	r1, r3, #16
 8000f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f12:	3302      	adds	r3, #2
 8000f14:	683a      	ldr	r2, [r7, #0]
 8000f16:	4413      	add	r3, r2
 8000f18:	b2ca      	uxtb	r2, r1
 8000f1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	0e19      	lsrs	r1, r3, #24
 8000f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f22:	3303      	adds	r3, #3
 8000f24:	683a      	ldr	r2, [r7, #0]
 8000f26:	4413      	add	r3, r2
 8000f28:	b2ca      	uxtb	r2, r1
 8000f2a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2e:	3304      	adds	r3, #4
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000f32:	6a3b      	ldr	r3, [r7, #32]
 8000f34:	3301      	adds	r3, #1
 8000f36:	623b      	str	r3, [r7, #32]
 8000f38:	e7ce      	b.n	8000ed8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6919      	ldr	r1, [r3, #16]
 8000f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f40:	683a      	ldr	r2, [r7, #0]
 8000f42:	4413      	add	r3, r2
 8000f44:	b2ca      	uxtb	r2, r1
 8000f46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	691b      	ldr	r3, [r3, #16]
 8000f4c:	0a19      	lsrs	r1, r3, #8
 8000f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f50:	3301      	adds	r3, #1
 8000f52:	683a      	ldr	r2, [r7, #0]
 8000f54:	4413      	add	r3, r2
 8000f56:	b2ca      	uxtb	r2, r1
 8000f58:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	691b      	ldr	r3, [r3, #16]
 8000f5e:	0c19      	lsrs	r1, r3, #16
 8000f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f62:	3302      	adds	r3, #2
 8000f64:	683a      	ldr	r2, [r7, #0]
 8000f66:	4413      	add	r3, r2
 8000f68:	b2ca      	uxtb	r2, r1
 8000f6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	691b      	ldr	r3, [r3, #16]
 8000f70:	0e19      	lsrs	r1, r3, #24
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	3303      	adds	r3, #3
 8000f76:	683a      	ldr	r2, [r7, #0]
 8000f78:	4413      	add	r3, r2
 8000f7a:	b2ca      	uxtb	r2, r1
 8000f7c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8000f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f80:	3304      	adds	r3, #4
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000f84:	2300      	movs	r3, #0
 8000f86:	61fb      	str	r3, [r7, #28]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	691b      	ldr	r3, [r3, #16]
 8000f8c:	69fa      	ldr	r2, [r7, #28]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d22b      	bcs.n	8000fea <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	699a      	ldr	r2, [r3, #24]
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	4413      	add	r3, r2
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8000fa0:	68f9      	ldr	r1, [r7, #12]
 8000fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa4:	683a      	ldr	r2, [r7, #0]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	b2ca      	uxtb	r2, r1
 8000faa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	0a19      	lsrs	r1, r3, #8
 8000fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	683a      	ldr	r2, [r7, #0]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	b2ca      	uxtb	r2, r1
 8000fba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	0c19      	lsrs	r1, r3, #16
 8000fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc2:	3302      	adds	r3, #2
 8000fc4:	683a      	ldr	r2, [r7, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	b2ca      	uxtb	r2, r1
 8000fca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	0e19      	lsrs	r1, r3, #24
 8000fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd2:	3303      	adds	r3, #3
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	b2ca      	uxtb	r2, r1
 8000fda:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fde:	3304      	adds	r3, #4
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	61fb      	str	r3, [r7, #28]
 8000fe8:	e7ce      	b.n	8000f88 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69d9      	ldr	r1, [r3, #28]
 8000fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff0:	683a      	ldr	r2, [r7, #0]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	b2ca      	uxtb	r2, r1
 8000ff6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	69db      	ldr	r3, [r3, #28]
 8000ffc:	0a19      	lsrs	r1, r3, #8
 8000ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001000:	3301      	adds	r3, #1
 8001002:	683a      	ldr	r2, [r7, #0]
 8001004:	4413      	add	r3, r2
 8001006:	b2ca      	uxtb	r2, r1
 8001008:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	0c19      	lsrs	r1, r3, #16
 8001010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001012:	3302      	adds	r3, #2
 8001014:	683a      	ldr	r2, [r7, #0]
 8001016:	4413      	add	r3, r2
 8001018:	b2ca      	uxtb	r2, r1
 800101a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	69db      	ldr	r3, [r3, #28]
 8001020:	0e19      	lsrs	r1, r3, #24
 8001022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001024:	3303      	adds	r3, #3
 8001026:	683a      	ldr	r2, [r7, #0]
 8001028:	4413      	add	r3, r2
 800102a:	b2ca      	uxtb	r2, r1
 800102c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800102e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001030:	3304      	adds	r3, #4
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001034:	2300      	movs	r3, #0
 8001036:	61bb      	str	r3, [r7, #24]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69db      	ldr	r3, [r3, #28]
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	429a      	cmp	r2, r3
 8001040:	d228      	bcs.n	8001094 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4413      	add	r3, r2
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff f8ba 	bl	80001c8 <strlen>
 8001054:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001058:	683a      	ldr	r2, [r7, #0]
 800105a:	4413      	add	r3, r2
 800105c:	6979      	ldr	r1, [r7, #20]
 800105e:	4618      	mov	r0, r3
 8001060:	f000 fb80 	bl	8001764 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001066:	3304      	adds	r3, #4
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800106a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106c:	683a      	ldr	r2, [r7, #0]
 800106e:	18d0      	adds	r0, r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4413      	add	r3, r2
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	4619      	mov	r1, r3
 8001080:	f003 f8d4 	bl	800422c <memcpy>
      offset += length_stringsi;
 8001084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	4413      	add	r3, r2
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	3301      	adds	r3, #1
 8001090:	61bb      	str	r3, [r7, #24]
 8001092:	e7d1      	b.n	8001038 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001096:	4618      	mov	r0, r3
 8001098:	3728      	adds	r7, #40	; 0x28
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800109e:	b580      	push	{r7, lr}
 80010a0:	b08e      	sub	sp, #56	; 0x38
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80010ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	4413      	add	r3, r2
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80010b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010b8:	3301      	adds	r3, #1
 80010ba:	683a      	ldr	r2, [r7, #0]
 80010bc:	4413      	add	r3, r2
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	6a3a      	ldr	r2, [r7, #32]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80010c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ca:	3302      	adds	r3, #2
 80010cc:	683a      	ldr	r2, [r7, #0]
 80010ce:	4413      	add	r3, r2
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	041b      	lsls	r3, r3, #16
 80010d4:	6a3a      	ldr	r2, [r7, #32]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80010da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010dc:	3303      	adds	r3, #3
 80010de:	683a      	ldr	r2, [r7, #0]
 80010e0:	4413      	add	r3, r2
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	061b      	lsls	r3, r3, #24
 80010e6:	6a3a      	ldr	r2, [r7, #32]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80010ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ee:	3304      	adds	r3, #4
 80010f0:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	6a3a      	ldr	r2, [r7, #32]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d90a      	bls.n	8001112 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68da      	ldr	r2, [r3, #12]
 8001100:	6a3b      	ldr	r3, [r7, #32]
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4619      	mov	r1, r3
 8001106:	4610      	mov	r0, r2
 8001108:	f003 f8a4 	bl	8004254 <realloc>
 800110c:	4602      	mov	r2, r0
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6a3a      	ldr	r2, [r7, #32]
 8001116:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001118:	2300      	movs	r3, #0
 800111a:	633b      	str	r3, [r7, #48]	; 0x30
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001122:	429a      	cmp	r2, r3
 8001124:	d236      	bcs.n	8001194 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800112e:	6839      	ldr	r1, [r7, #0]
 8001130:	440a      	add	r2, r1
 8001132:	7812      	ldrb	r2, [r2, #0]
 8001134:	4313      	orrs	r3, r2
 8001136:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001138:	697a      	ldr	r2, [r7, #20]
 800113a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800113c:	3301      	adds	r3, #1
 800113e:	6839      	ldr	r1, [r7, #0]
 8001140:	440b      	add	r3, r1
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	021b      	lsls	r3, r3, #8
 8001146:	4313      	orrs	r3, r2
 8001148:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800114e:	3302      	adds	r3, #2
 8001150:	6839      	ldr	r1, [r7, #0]
 8001152:	440b      	add	r3, r1
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	041b      	lsls	r3, r3, #16
 8001158:	4313      	orrs	r3, r2
 800115a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800115c:	697a      	ldr	r2, [r7, #20]
 800115e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001160:	3303      	adds	r3, #3
 8001162:	6839      	ldr	r1, [r7, #0]
 8001164:	440b      	add	r3, r1
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	061b      	lsls	r3, r3, #24
 800116a:	4313      	orrs	r3, r2
 800116c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001176:	3304      	adds	r3, #4
 8001178:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	68da      	ldr	r2, [r3, #12]
 800117e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4413      	add	r3, r2
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	3208      	adds	r2, #8
 8001188:	6812      	ldr	r2, [r2, #0]
 800118a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 800118c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800118e:	3301      	adds	r3, #1
 8001190:	633b      	str	r3, [r7, #48]	; 0x30
 8001192:	e7c3      	b.n	800111c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001196:	683a      	ldr	r2, [r7, #0]
 8001198:	4413      	add	r3, r2
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800119e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011a0:	3301      	adds	r3, #1
 80011a2:	683a      	ldr	r2, [r7, #0]
 80011a4:	4413      	add	r3, r2
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	69fa      	ldr	r2, [r7, #28]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80011b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011b2:	3302      	adds	r3, #2
 80011b4:	683a      	ldr	r2, [r7, #0]
 80011b6:	4413      	add	r3, r2
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	041b      	lsls	r3, r3, #16
 80011bc:	69fa      	ldr	r2, [r7, #28]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80011c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011c4:	3303      	adds	r3, #3
 80011c6:	683a      	ldr	r2, [r7, #0]
 80011c8:	4413      	add	r3, r2
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	061b      	lsls	r3, r3, #24
 80011ce:	69fa      	ldr	r2, [r7, #28]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80011d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011d6:	3304      	adds	r3, #4
 80011d8:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	691b      	ldr	r3, [r3, #16]
 80011de:	69fa      	ldr	r2, [r7, #28]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d90a      	bls.n	80011fa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	699a      	ldr	r2, [r3, #24]
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4619      	mov	r1, r3
 80011ee:	4610      	mov	r0, r2
 80011f0:	f003 f830 	bl	8004254 <realloc>
 80011f4:	4602      	mov	r2, r0
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	69fa      	ldr	r2, [r7, #28]
 80011fe:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001200:	2300      	movs	r3, #0
 8001202:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	691b      	ldr	r3, [r3, #16]
 8001208:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800120a:	429a      	cmp	r2, r3
 800120c:	d236      	bcs.n	800127c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001216:	6839      	ldr	r1, [r7, #0]
 8001218:	440a      	add	r2, r1
 800121a:	7812      	ldrb	r2, [r2, #0]
 800121c:	4313      	orrs	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001224:	3301      	adds	r3, #1
 8001226:	6839      	ldr	r1, [r7, #0]
 8001228:	440b      	add	r3, r1
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	021b      	lsls	r3, r3, #8
 800122e:	4313      	orrs	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001236:	3302      	adds	r3, #2
 8001238:	6839      	ldr	r1, [r7, #0]
 800123a:	440b      	add	r3, r1
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	041b      	lsls	r3, r3, #16
 8001240:	4313      	orrs	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001248:	3303      	adds	r3, #3
 800124a:	6839      	ldr	r1, [r7, #0]
 800124c:	440b      	add	r3, r1
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	061b      	lsls	r3, r3, #24
 8001252:	4313      	orrs	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 800125c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800125e:	3304      	adds	r3, #4
 8001260:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	699a      	ldr	r2, [r3, #24]
 8001266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	4413      	add	r3, r2
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	3214      	adds	r2, #20
 8001270:	6812      	ldr	r2, [r2, #0]
 8001272:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001276:	3301      	adds	r3, #1
 8001278:	62fb      	str	r3, [r7, #44]	; 0x2c
 800127a:	e7c3      	b.n	8001204 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800127c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800127e:	683a      	ldr	r2, [r7, #0]
 8001280:	4413      	add	r3, r2
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001288:	3301      	adds	r3, #1
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	4413      	add	r3, r2
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	021b      	lsls	r3, r3, #8
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800129a:	3302      	adds	r3, #2
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	4413      	add	r3, r2
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	041b      	lsls	r3, r3, #16
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80012aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ac:	3303      	adds	r3, #3
 80012ae:	683a      	ldr	r2, [r7, #0]
 80012b0:	4413      	add	r3, r2
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	061b      	lsls	r3, r3, #24
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80012bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012be:	3304      	adds	r3, #4
 80012c0:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d90a      	bls.n	80012e2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4619      	mov	r1, r3
 80012d6:	4610      	mov	r0, r2
 80012d8:	f002 ffbc 	bl	8004254 <realloc>
 80012dc:	4602      	mov	r2, r0
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80012e8:	2300      	movs	r3, #0
 80012ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69db      	ldr	r3, [r3, #28]
 80012f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d23f      	bcs.n	8001376 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80012f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012f8:	683a      	ldr	r2, [r7, #0]
 80012fa:	441a      	add	r2, r3
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	4611      	mov	r1, r2
 8001302:	4618      	mov	r0, r3
 8001304:	f000 fa4c 	bl	80017a0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800130a:	3304      	adds	r3, #4
 800130c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800130e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
 8001312:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4413      	add	r3, r2
 8001318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800131a:	429a      	cmp	r2, r3
 800131c:	d20c      	bcs.n	8001338 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800131e:	683a      	ldr	r2, [r7, #0]
 8001320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001322:	441a      	add	r2, r3
 8001324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001326:	3b01      	subs	r3, #1
 8001328:	6839      	ldr	r1, [r7, #0]
 800132a:	440b      	add	r3, r1
 800132c:	7812      	ldrb	r2, [r2, #0]
 800132e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001332:	3301      	adds	r3, #1
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
 8001336:	e7ec      	b.n	8001312 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001338:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	4413      	add	r3, r2
 800133e:	3b01      	subs	r3, #1
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	4413      	add	r3, r2
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800134a:	3b01      	subs	r3, #1
 800134c:	683a      	ldr	r2, [r7, #0]
 800134e:	441a      	add	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001354:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4413      	add	r3, r2
 800135a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	3220      	adds	r2, #32
 800136a:	6812      	ldr	r2, [r2, #0]
 800136c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800136e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001370:	3301      	adds	r3, #1
 8001372:	62bb      	str	r3, [r7, #40]	; 0x28
 8001374:	e7ba      	b.n	80012ec <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001378:	4618      	mov	r0, r3
 800137a:	3738      	adds	r7, #56	; 0x38
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	4b03      	ldr	r3, [pc, #12]	; (8001398 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	0800461c 	.word	0x0800461c

0800139c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	4b03      	ldr	r3, [pc, #12]	; (80013b4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80013a6:	4618      	mov	r0, r3
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	08004584 	.word	0x08004584

080013b8 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	691b      	ldr	r3, [r3, #16]
  }
 80013c4:	4618      	mov	r0, r3
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	425b      	negs	r3, r3
 80013e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013e8:	4618      	mov	r0, r3
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <_ZN13STM32HardwareC1Ev+0x34>)
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4618      	mov	r0, r3
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	20000a38 	.word	0x20000a38

0800142c <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f000 f804 	bl	8001442 <_ZN13STM32Hardware10reset_rbufEv>
    }
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6818      	ldr	r0, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	3304      	adds	r3, #4
 8001452:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001456:	4619      	mov	r1, r3
 8001458:	f002 f990 	bl	800377c <HAL_UART_Receive_DMA>
    }
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <_ZN13STM32Hardware4readEv>:

    int read(){
 8001464:	b590      	push	{r4, r7, lr}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
      int c = -1;
 800146c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001470:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff ffa9 	bl	80013d0 <_ZN13STM32Hardware10getRdmaIndEv>
 800147e:	4603      	mov	r3, r0
 8001480:	429c      	cmp	r4, r3
 8001482:	bf14      	ite	ne
 8001484:	2301      	movne	r3, #1
 8001486:	2300      	moveq	r3, #0
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d012      	beq.n	80014b4 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001494:	1c59      	adds	r1, r3, #1
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	4413      	add	r3, r2
 80014a0:	791b      	ldrb	r3, [r3, #4]
 80014a2:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80014aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 80014b4:	68fb      	ldr	r3, [r7, #12]
    }
 80014b6:	4618      	mov	r0, r3
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd90      	pop	{r4, r7, pc}
	...

080014c0 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b20      	cmp	r3, #32
 80014d4:	d108      	bne.n	80014e8 <_ZN13STM32Hardware5flushEv+0x28>
 80014d6:	4b28      	ldr	r3, [pc, #160]	; (8001578 <_ZN13STM32Hardware5flushEv+0xb8>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	f083 0301 	eor.w	r3, r3, #1
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <_ZN13STM32Hardware5flushEv+0x28>
 80014e4:	2301      	movs	r3, #1
 80014e6:	e000      	b.n	80014ea <_ZN13STM32Hardware5flushEv+0x2a>
 80014e8:	2300      	movs	r3, #0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d03f      	beq.n	800156e <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 80014ee:	4b22      	ldr	r3, [pc, #136]	; (8001578 <_ZN13STM32Hardware5flushEv+0xb8>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001500:	429a      	cmp	r2, r3
 8001502:	d031      	beq.n	8001568 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001510:	429a      	cmp	r2, r3
 8001512:	d20a      	bcs.n	800152a <_ZN13STM32Hardware5flushEv+0x6a>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800151a:	b29a      	uxth	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001522:	b29b      	uxth	r3, r3
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	b29b      	uxth	r3, r3
 8001528:	e006      	b.n	8001538 <_ZN13STM32Hardware5flushEv+0x78>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001530:	b29b      	uxth	r3, r3
 8001532:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001536:	b29b      	uxth	r3, r3
 8001538:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6818      	ldr	r0, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001544:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	4413      	add	r3, r2
 800154c:	89fa      	ldrh	r2, [r7, #14]
 800154e:	4619      	mov	r1, r3
 8001550:	f002 f8a8 	bl	80036a4 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800155a:	89fb      	ldrh	r3, [r7, #14]
 800155c:	4413      	add	r3, r2
 800155e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8001568:	4b03      	ldr	r3, [pc, #12]	; (8001578 <_ZN13STM32Hardware5flushEv+0xb8>)
 800156a:	2200      	movs	r2, #0
 800156c:	701a      	strb	r2, [r3, #0]
      }
    }
 800156e:	bf00      	nop
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000090 	.word	0x20000090

0800157c <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
      int n = length;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001592:	bfa8      	it	ge
 8001594:	f44f 7300 	movge.w	r3, #512	; 0x200
 8001598:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80015a0:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	4293      	cmp	r3, r2
 80015a8:	bf28      	it	cs
 80015aa:	4613      	movcs	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80015b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	4413      	add	r3, r2
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	68b9      	ldr	r1, [r7, #8]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f002 fe33 	bl	800422c <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	4413      	add	r3, r2
 80015d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d00b      	beq.n	80015fa <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f503 7002 	add.w	r0, r3, #520	; 0x208
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	68ba      	ldr	r2, [r7, #8]
 80015ec:	18d1      	adds	r1, r2, r3
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	461a      	mov	r2, r3
 80015f6:	f002 fe19 	bl	800422c <memcpy>
      }

      flush();
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f7ff ff60 	bl	80014c0 <_ZN13STM32Hardware5flushEv>
    }
 8001600:	bf00      	nop
 8001602:	3718      	adds	r7, #24
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	f001 f86a 	bl	80026e8 <HAL_GetTick>
 8001614:	4603      	mov	r3, r0
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <_ZN8std_msgs5UInt8C1Ev>:
  {
    public:
      typedef uint8_t _data_type;
      _data_type data;

    UInt8():
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
      data(0)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff f88e 	bl	800074c <_ZN3ros3MsgC1Ev>
 8001630:	4a05      	ldr	r2, [pc, #20]	; (8001648 <_ZN8std_msgs5UInt8C1Ev+0x28>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	711a      	strb	r2, [r3, #4]
    {
    }
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	0800466c 	.word	0x0800466c

0800164c <_ZNK8std_msgs5UInt89serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	4413      	add	r3, r2
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	7912      	ldrb	r2, [r2, #4]
 8001664:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	3301      	adds	r3, #1
 800166a:	60fb      	str	r3, [r7, #12]
      return offset;
 800166c:	68fb      	ldr	r3, [r7, #12]
    }
 800166e:	4618      	mov	r0, r3
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <_ZN8std_msgs5UInt811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800167a:	b480      	push	{r7}
 800167c:	b085      	sub	sp, #20
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
 8001682:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	60fb      	str	r3, [r7, #12]
      this->data =  ((uint8_t) (*(inbuffer + offset)));
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	4413      	add	r3, r2
 800168e:	781a      	ldrb	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	3301      	adds	r3, #1
 8001698:	60fb      	str	r3, [r7, #12]
     return offset;
 800169a:	68fb      	ldr	r3, [r7, #12]
    }
 800169c:	4618      	mov	r0, r3
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <_ZN8std_msgs5UInt87getTypeEv>:

    const char * getType(){ return "std_msgs/UInt8"; };
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <_ZN8std_msgs5UInt87getTypeEv+0x18>)
 80016b2:	4618      	mov	r0, r3
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	080045a8 	.word	0x080045a8

080016c4 <_ZN8std_msgs5UInt86getMD5Ev>:
    const char * getMD5(){ return "7c8164229e7d2c17eb95e9231617fdee"; };
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	4b03      	ldr	r3, [pc, #12]	; (80016dc <_ZN8std_msgs5UInt86getMD5Ev+0x18>)
 80016ce:	4618      	mov	r0, r3
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	080045b8 	.word	0x080045b8

080016e0 <HAL_UART_TxCpltCallback>:
ros::NodeHandle nh;

void ledCallback(const std_msgs::UInt8& msg);
ros::Subscriber<std_msgs::UInt8> ledSub("led", &ledCallback);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 80016e8:	4805      	ldr	r0, [pc, #20]	; (8001700 <HAL_UART_TxCpltCallback+0x20>)
 80016ea:	f000 f943 	bl	8001974 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80016ee:	4603      	mov	r3, r0
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fee5 	bl	80014c0 <_ZN13STM32Hardware5flushEv>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000094 	.word	0x20000094

08001704 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 800170c:	4805      	ldr	r0, [pc, #20]	; (8001724 <HAL_UART_RxCpltCallback+0x20>)
 800170e:	f000 f931 	bl	8001974 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8001712:	4603      	mov	r3, r0
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff fe94 	bl	8001442 <_ZN13STM32Hardware10reset_rbufEv>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000094 	.word	0x20000094

08001728 <setup>:

void setup() {
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
	nh.initNode();
 800172c:	4804      	ldr	r0, [pc, #16]	; (8001740 <setup+0x18>)
 800172e:	f000 f92d 	bl	800198c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.subscribe(ledSub);
 8001732:	4904      	ldr	r1, [pc, #16]	; (8001744 <setup+0x1c>)
 8001734:	4802      	ldr	r0, [pc, #8]	; (8001740 <setup+0x18>)
 8001736:	f000 f946 	bl	80019c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_>
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000094 	.word	0x20000094
 8001744:	200009d0 	.word	0x200009d0

08001748 <_Z11ledCallbackRKN8std_msgs5UInt8E>:
void loop() {
	nh.spinOnce();
	HAL_Delay(10);
}

void ledCallback(const std_msgs::UInt8& msg) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8001750:	2108      	movs	r1, #8
 8001752:	4803      	ldr	r0, [pc, #12]	; (8001760 <_Z11ledCallbackRKN8std_msgs5UInt8E+0x18>)
 8001754:	f001 fada 	bl	8002d0c <HAL_GPIO_TogglePin>
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40020400 	.word	0x40020400

08001764 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2b03      	cmp	r3, #3
 8001776:	d80d      	bhi.n	8001794 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	fa22 f103 	lsr.w	r1, r2, r3
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4413      	add	r3, r2
 8001788:	b2ca      	uxtb	r2, r1
 800178a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	3301      	adds	r3, #1
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	e7ee      	b.n	8001772 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8001794:	bf00      	nop
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2b03      	cmp	r3, #3
 80017b8:	d811      	bhi.n	80017de <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6839      	ldr	r1, [r7, #0]
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	440a      	add	r2, r1
 80017c4:	7812      	ldrb	r2, [r2, #0]
 80017c6:	4611      	mov	r1, r2
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	00d2      	lsls	r2, r2, #3
 80017cc:	fa01 f202 	lsl.w	r2, r1, r2
 80017d0:	431a      	orrs	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	3301      	adds	r3, #1
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	e7ea      	b.n	80017b4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80017de:	bf00      	nop
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	4a04      	ldr	r2, [pc, #16]	; (8001808 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4618      	mov	r0, r3
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	0800469c 	.word	0x0800469c

0800180c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff ffe8 	bl	80017ec <_ZN3ros15NodeHandleBase_C1Ev>
 800181c:	4a3a      	ldr	r2, [pc, #232]	; (8001908 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	3304      	adds	r3, #4
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fde4 	bl	80013f4 <_ZN13STM32HardwareC1Ev>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f603 1314 	addw	r3, r3, #2324	; 0x914
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fafa 	bl	8000e34 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	2b18      	cmp	r3, #24
 8001848:	d80b      	bhi.n	8001862 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	2200      	movs	r2, #0
 8001858:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	3301      	adds	r3, #1
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	e7f0      	b.n	8001844 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	2b18      	cmp	r3, #24
 800186a:	d80a      	bhi.n	8001882 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001874:	2100      	movs	r1, #0
 8001876:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	3301      	adds	r3, #1
 800187e:	613b      	str	r3, [r7, #16]
 8001880:	e7f1      	b.n	8001866 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800188c:	d20a      	bcs.n	80018a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4413      	add	r3, r2
 8001894:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001898:	2200      	movs	r2, #0
 800189a:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	3301      	adds	r3, #1
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	e7f0      	b.n	8001886 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80018a4:	2300      	movs	r3, #0
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018ae:	d20a      	bcs.n	80018c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	4413      	add	r3, r2
 80018b6:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80018ba:	2200      	movs	r2, #0
 80018bc:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	3301      	adds	r3, #1
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	e7f0      	b.n	80018a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	08004658 	.word	0x08004658

0800190c <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	4a04      	ldr	r2, [pc, #16]	; (8001928 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4618      	mov	r0, r3
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	08004684 	.word	0x08004684

0800192c <_ZN3ros10SubscriberIN8std_msgs5UInt8EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
 8001938:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff ffe5 	bl	800190c <_ZN3ros11Subscriber_C1Ev>
 8001942:	4a0b      	ldr	r2, [pc, #44]	; (8001970 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvEC1EPKcPFvRKS2_Ei+0x44>)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	330c      	adds	r3, #12
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fe67 	bl	8001620 <_ZN8std_msgs5UInt8C1Ev>
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	615a      	str	r2, [r3, #20]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	68ba      	ldr	r2, [r7, #8]
 8001962:	609a      	str	r2, [r3, #8]
  };
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	08004640 	.word	0x08004640

08001974 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3304      	adds	r3, #4
  }
 8001980:	4618      	mov	r0, r3
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3304      	adds	r3, #4
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fd47 	bl	800142c <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 80019c6:	b480      	push	{r7}
 80019c8:	b085      	sub	sp, #20
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
 80019ce:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2b18      	cmp	r3, #24
 80019d8:	dc19      	bgt.n	8001a0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	f202 2222 	addw	r2, r2, #546	; 0x222
 80019e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10d      	bne.n	8001a06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80019ea:	6839      	ldr	r1, [r7, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80019f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	605a      	str	r2, [r3, #4]
        return true;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e004      	b.n	8001a10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	e7e2      	b.n	80019d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_+0xe>
      }
    }
    return false;
 8001a0e:	2300      	movs	r3, #0
  }
 8001a10:	4618      	mov	r0, r3
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3304      	adds	r3, #4
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff fded 	bl	8001608 <_ZN13STM32Hardware4timeEv>
 8001a2e:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d903      	bls.n	8001a4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d009      	beq.n	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d903      	bls.n	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d014      	beq.n	8001a9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3304      	adds	r3, #4
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fdc6 	bl	8001608 <_ZN13STM32Hardware4timeEv>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	1ad2      	subs	r2, r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	bf8c      	ite	hi
 8001a8c:	2301      	movhi	r3, #1
 8001a8e:	2300      	movls	r3, #0
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d002      	beq.n	8001a9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8001a96:	f06f 0301 	mvn.w	r3, #1
 8001a9a:	e197      	b.n	8001dcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      int data = hardware_.read();
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3304      	adds	r3, #4
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fcdf 	bl	8001464 <_ZN13STM32Hardware4readEv>
 8001aa6:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f2c0 8177 	blt.w	8001d9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x382>
      checksum_ += data;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	441a      	add	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001ac6:	2b07      	cmp	r3, #7
 8001ac8:	d11e      	bne.n	8001b08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8001ad0:	1c59      	adds	r1, r3, #1
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8001ad8:	68ba      	ldr	r2, [r7, #8]
 8001ada:	b2d1      	uxtb	r1, r2
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	4413      	add	r3, r2
 8001ae0:	460a      	mov	r2, r1
 8001ae2:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001aec:	1e5a      	subs	r2, r3, #1
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1b4      	bne.n	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2208      	movs	r2, #8
 8001b02:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001b06:	e7af      	b.n	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d128      	bne.n	8001b64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	2bff      	cmp	r3, #255	; 0xff
 8001b16:	d10d      	bne.n	8001b34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001b1e:	1c5a      	adds	r2, r3, #1
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f103 0214 	add.w	r2, r3, #20
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8001b32:	e799      	b.n	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3304      	adds	r3, #4
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fd65 	bl	8001608 <_ZN13STM32Hardware4timeEv>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	bf8c      	ite	hi
 8001b4c:	2301      	movhi	r3, #1
 8001b4e:	2300      	movls	r3, #0
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d088      	beq.n	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8001b5e:	f06f 0301 	mvn.w	r3, #1
 8001b62:	e133      	b.n	8001dcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      else if (mode_ == MODE_PROTOCOL_VER)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d11b      	bne.n	8001ba6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x18a>
        if (data == PROTOCOL_VER)
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	2bfe      	cmp	r3, #254	; 0xfe
 8001b72:	d107      	bne.n	8001b84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001b7a:	1c5a      	adds	r2, r3, #1
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001b82:	e771      	b.n	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001b92:	f083 0301 	eor.w	r3, r3, #1
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f43f af65 	beq.w	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 f918 	bl	8001dd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8001ba4:	e760      	b.n	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d113      	bne.n	8001bd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1bc>
        bytes_ = data;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001bc6:	1c5a      	adds	r2, r3, #1
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68ba      	ldr	r2, [r7, #8]
 8001bd2:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001bd6:	e747      	b.n	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001bde:	2b03      	cmp	r3, #3
 8001be0:	d110      	bne.n	8001c04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e8>
        bytes_ += data << 8;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	021b      	lsls	r3, r3, #8
 8001bec:	441a      	add	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001bfa:	1c5a      	adds	r2, r3, #1
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001c02:	e731      	b.n	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	d116      	bne.n	8001c3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x220>
        if ((checksum_ % 256) == 255)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001c14:	425a      	negs	r2, r3
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	bf58      	it	pl
 8001c1c:	4253      	negpl	r3, r2
 8001c1e:	2bff      	cmp	r3, #255	; 0xff
 8001c20:	d107      	bne.n	8001c32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x216>
          mode_++;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c28:	1c5a      	adds	r2, r3, #1
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001c30:	e71a      	b.n	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001c3a:	e715      	b.n	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c42:	2b05      	cmp	r3, #5
 8001c44:	d10f      	bne.n	8001c66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24a>
        topic_ = data;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68ba      	ldr	r2, [r7, #8]
 8001c4a:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c54:	1c5a      	adds	r2, r3, #1
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001c64:	e700      	b.n	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c6c:	2b06      	cmp	r3, #6
 8001c6e:	d117      	bne.n	8001ca0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x284>
        topic_ += data << 8;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	021b      	lsls	r3, r3, #8
 8001c7a:	441a      	add	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2207      	movs	r2, #7
 8001c86:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f47f aee9 	bne.w	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2208      	movs	r2, #8
 8001c9a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001c9e:	e6e3      	b.n	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001ca6:	2b08      	cmp	r3, #8
 8001ca8:	f47f aede 	bne.w	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001cba:	425a      	negs	r2, r3
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	bf58      	it	pl
 8001cc2:	4253      	negpl	r3, r2
 8001cc4:	2bff      	cmp	r3, #255	; 0xff
 8001cc6:	f47f aecf 	bne.w	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d110      	bne.n	8001cf6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2da>
            requestSyncTime();
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f87d 	bl	8001dd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f898 	bl	8001e10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8001cf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cf4:	e06a      	b.n	8001dcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
          else if (topic_ == TopicInfo::ID_TIME)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001cfc:	2b0a      	cmp	r3, #10
 8001cfe:	d107      	bne.n	8001d10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2f4>
            syncTime(message_in);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001d06:	4619      	mov	r1, r3
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f961 	bl	8001fd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8001d0e:	e6ab      	b.n	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001d16:	2b06      	cmp	r3, #6
 8001d18:	d10e      	bne.n	8001d38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x31c>
            req_param_resp.deserialize(message_in);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001d26:	4619      	mov	r1, r3
 8001d28:	4610      	mov	r0, r2
 8001d2a:	f7ff f9b8 	bl	800109e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8001d36:	e697      	b.n	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001d3e:	2b0b      	cmp	r3, #11
 8001d40:	d104      	bne.n	8001d4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x330>
            configured_ = false;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001d4a:	e68d      	b.n	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001d52:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f43f ae81 	beq.w	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001d6c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001d76:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001d80:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8001d98:	4611      	mov	r1, r2
 8001d9a:	4798      	blx	r3
    while (true)
 8001d9c:	e664      	b.n	8001a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8001d9e:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00f      	beq.n	8001dca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d906      	bls.n	8001dca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
      requestSyncTime();
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 f809 	bl	8001dd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8001dca:	2300      	movs	r3, #0
  }
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8001ddc:	f107 030c 	add.w	r3, r7, #12
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7fe fcc3 	bl	800076c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f107 020c 	add.w	r2, r7, #12
 8001df0:	210a      	movs	r1, #10
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	4798      	blx	r3
    rt_time = hardware_.time();
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff fc04 	bl	8001608 <_ZN13STM32Hardware4timeEv>
 8001e00:	4602      	mov	r2, r0
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8001e08:	bf00      	nop
 8001e0a:	3718      	adds	r7, #24
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8001e10:	b590      	push	{r4, r7, lr}
 8001e12:	b08b      	sub	sp, #44	; 0x2c
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8001e18:	f107 030c 	add.w	r3, r7, #12
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7fe fd95 	bl	800094c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001e22:	2300      	movs	r3, #0
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	2b18      	cmp	r3, #24
 8001e2a:	dc63      	bgt.n	8001ef4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d056      	beq.n	8001eec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	6859      	ldr	r1, [r3, #4]
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	3308      	adds	r3, #8
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4608      	mov	r0, r1
 8001e8c:	4798      	blx	r3
 8001e8e:	4603      	mov	r3, r0
 8001e90:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	6859      	ldr	r1, [r3, #4]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	330c      	adds	r3, #12
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4608      	mov	r0, r1
 8001eba:	4798      	blx	r3
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8001ec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ec4:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681c      	ldr	r4, [r3, #0]
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff fa6c 	bl	80013b8 <_ZN3ros9Publisher15getEndpointTypeEv>
 8001ee0:	4601      	mov	r1, r0
 8001ee2:	f107 030c 	add.w	r3, r7, #12
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	3301      	adds	r3, #1
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef2:	e798      	b.n	8001e26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	2b18      	cmp	r3, #24
 8001efc:	dc5f      	bgt.n	8001fbe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f02:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d053      	beq.n	8001fb6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f12:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f24:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f34:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001f38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f40:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	3308      	adds	r3, #8
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4608      	mov	r0, r1
 8001f50:	4798      	blx	r3
 8001f52:	4603      	mov	r3, r0
 8001f54:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f5a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001f5e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f66:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	330c      	adds	r3, #12
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4608      	mov	r0, r1
 8001f76:	4798      	blx	r3
 8001f78:	4603      	mov	r3, r0
 8001f7a:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8001f7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f80:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681c      	ldr	r4, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f8c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001f90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f98:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	3304      	adds	r3, #4
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4608      	mov	r0, r1
 8001fa8:	4798      	blx	r3
 8001faa:	4601      	mov	r1, r0
 8001fac:	f107 030c 	add.w	r3, r7, #12
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	3301      	adds	r3, #1
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
 8001fbc:	e79c      	b.n	8001ef8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8001fc6:	bf00      	nop
 8001fc8:	372c      	adds	r7, #44	; 0x2c
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd90      	pop	{r4, r7, pc}
	...

08001fd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8001fda:	f107 0308 	add.w	r3, r7, #8
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe fbc4 	bl	800076c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3304      	adds	r3, #4
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fb0d 	bl	8001608 <_ZN13STM32Hardware4timeEv>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8001ffa:	f107 0308 	add.w	r3, r7, #8
 8001ffe:	6839      	ldr	r1, [r7, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe fc23 	bl	800084c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	4915      	ldr	r1, [pc, #84]	; (8002060 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 800200c:	fba1 1303 	umull	r1, r3, r1, r3
 8002010:	099b      	lsrs	r3, r3, #6
 8002012:	4413      	add	r3, r2
 8002014:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8002016:	6939      	ldr	r1, [r7, #16]
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	4b11      	ldr	r3, [pc, #68]	; (8002060 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 800201c:	fba3 0302 	umull	r0, r3, r3, r2
 8002020:	099b      	lsrs	r3, r3, #6
 8002022:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002026:	fb00 f303 	mul.w	r3, r0, r3
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	4a0d      	ldr	r2, [pc, #52]	; (8002064 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 800202e:	fb02 f303 	mul.w	r3, r2, r3
 8002032:	440b      	add	r3, r1
 8002034:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8002036:	f107 0308 	add.w	r3, r7, #8
 800203a:	3304      	adds	r3, #4
 800203c:	4619      	mov	r1, r3
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f8a4 	bl	800218c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3304      	adds	r3, #4
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff fadd 	bl	8001608 <_ZN13STM32Hardware4timeEv>
 800204e:	4602      	mov	r2, r0
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8002056:	bf00      	nop
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	10624dd3 	.word	0x10624dd3
 8002064:	000f4240 	.word	0x000f4240

08002068 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8002068:	b580      	push	{r7, lr}
 800206a:	b088      	sub	sp, #32
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	2b63      	cmp	r3, #99	; 0x63
 8002078:	dd09      	ble.n	800208e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002080:	f083 0301 	eor.w	r3, r3, #1
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800208a:	2300      	movs	r3, #0
 800208c:	e077      	b.n	800217e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	f202 6224 	addw	r2, r2, #1572	; 0x624
 800209a:	3207      	adds	r2, #7
 800209c:	4611      	mov	r1, r2
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	4798      	blx	r3
 80020a2:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	22ff      	movs	r2, #255	; 0xff
 80020a8:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	22fe      	movs	r2, #254	; 0xfe
 80020b0:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	121b      	asrs	r3, r3, #8
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 80020d8:	4413      	add	r3, r2
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	b21b      	sxth	r3, r3
 80020f4:	121b      	asrs	r3, r3, #8
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002102:	2305      	movs	r3, #5
 8002104:	61bb      	str	r3, [r7, #24]
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	3307      	adds	r3, #7
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	429a      	cmp	r2, r3
 800210e:	da0d      	bge.n	800212c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	4413      	add	r3, r2
 8002116:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	461a      	mov	r2, r3
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	4413      	add	r3, r2
 8002122:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	3301      	adds	r3, #1
 8002128:	61bb      	str	r3, [r7, #24]
 800212a:	e7ec      	b.n	8002106 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	3307      	adds	r3, #7
 8002130:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	425a      	negs	r2, r3
 8002136:	b2db      	uxtb	r3, r3
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	bf58      	it	pl
 800213c:	4253      	negpl	r3, r2
 800213e:	b2da      	uxtb	r2, r3
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	1c59      	adds	r1, r3, #1
 8002144:	6179      	str	r1, [r7, #20]
 8002146:	43d2      	mvns	r2, r2
 8002148:	b2d1      	uxtb	r1, r2
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	4413      	add	r3, r2
 800214e:	460a      	mov	r2, r1
 8002150:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800215a:	dc0a      	bgt.n	8002172 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	1d18      	adds	r0, r3, #4
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	4619      	mov	r1, r3
 800216a:	f7ff fa07 	bl	800157c <_ZN13STM32Hardware5writeEPhi>
      return l;
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	e005      	b.n	800217e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8002172:	4905      	ldr	r1, [pc, #20]	; (8002188 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 f849 	bl	800220c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800217a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 800217e:	4618      	mov	r0, r3
 8002180:	3720      	adds	r7, #32
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	080045dc 	.word	0x080045dc

0800218c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3304      	adds	r3, #4
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff fa34 	bl	8001608 <_ZN13STM32Hardware4timeEv>
 80021a0:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4915      	ldr	r1, [pc, #84]	; (8002200 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80021aa:	fba1 1303 	umull	r1, r3, r1, r3
 80021ae:	099b      	lsrs	r3, r3, #6
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	1e5a      	subs	r2, r3, #1
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	6859      	ldr	r1, [r3, #4]
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80021c2:	fba3 0302 	umull	r0, r3, r3, r2
 80021c6:	099b      	lsrs	r3, r3, #6
 80021c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021cc:	fb00 f303 	mul.w	r3, r0, r3
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	4a0c      	ldr	r2, [pc, #48]	; (8002204 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 80021d4:	fb02 f303 	mul.w	r3, r2, r3
 80021d8:	1aca      	subs	r2, r1, r3
 80021da:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 80021dc:	4413      	add	r3, r2
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80021f0:	4619      	mov	r1, r3
 80021f2:	4610      	mov	r0, r2
 80021f4:	f7fe f970 	bl	80004d8 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80021f8:	bf00      	nop
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	10624dd3 	.word	0x10624dd3
 8002204:	000f4240 	.word	0x000f4240
 8002208:	3b9aca00 	.word	0x3b9aca00

0800220c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	2103      	movs	r1, #3
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f804 	bl	8002228 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8002220:	bf00      	nop
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	460b      	mov	r3, r1
 8002232:	607a      	str	r2, [r7, #4]
 8002234:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8002236:	f107 0314 	add.w	r3, r7, #20
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe fd4a 	bl	8000cd4 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8002240:	7afb      	ldrb	r3, [r7, #11]
 8002242:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f107 0214 	add.w	r2, r7, #20
 8002252:	2107      	movs	r1, #7
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	4798      	blx	r3
  }
 8002258:	bf00      	nop
 800225a:	3720      	adds	r7, #32
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <_Z41__static_initialization_and_destruction_0ii>:
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d10d      	bne.n	800228c <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002276:	4293      	cmp	r3, r2
 8002278:	d108      	bne.n	800228c <_Z41__static_initialization_and_destruction_0ii+0x2c>
ros::NodeHandle nh;
 800227a:	4806      	ldr	r0, [pc, #24]	; (8002294 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800227c:	f7ff fac6 	bl	800180c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<std_msgs::UInt8> ledSub("led", &ledCallback);
 8002280:	2301      	movs	r3, #1
 8002282:	4a05      	ldr	r2, [pc, #20]	; (8002298 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8002284:	4905      	ldr	r1, [pc, #20]	; (800229c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8002286:	4806      	ldr	r0, [pc, #24]	; (80022a0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002288:	f7ff fb50 	bl	800192c <_ZN3ros10SubscriberIN8std_msgs5UInt8EvEC1EPKcPFvRKS2_Ei>
}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20000094 	.word	0x20000094
 8002298:	08001749 	.word	0x08001749
 800229c:	08004618 	.word	0x08004618
 80022a0:	200009d0 	.word	0x200009d0

080022a4 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	330c      	adds	r3, #12
 80022b2:	6839      	ldr	r1, [r7, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff f9e0 	bl	800167a <_ZN8std_msgs5UInt811deserializeEPh>
    this->cb_(msg);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	320c      	adds	r2, #12
 80022c2:	4610      	mov	r0, r2
 80022c4:	4798      	blx	r3
  }
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699b      	ldr	r3, [r3, #24]
  }
 80022da:	4618      	mov	r0, r3
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	330c      	adds	r3, #12
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff f9d8 	bl	80016a8 <_ZN8std_msgs5UInt87getTypeEv>
 80022f8:	4603      	mov	r3, r0
  }
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8002302:	b580      	push	{r7, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	330c      	adds	r3, #12
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff f9d8 	bl	80016c4 <_ZN8std_msgs5UInt86getMD5Ev>
 8002314:	4603      	mov	r3, r0
  }
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
    return configured_;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 800232c:	4618      	mov	r0, r3
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <_GLOBAL__sub_I_nh>:
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
 800233c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002340:	2001      	movs	r0, #1
 8002342:	f7ff ff8d 	bl	8002260 <_Z41__static_initialization_and_destruction_0ii>
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	607b      	str	r3, [r7, #4]
 8002352:	4b10      	ldr	r3, [pc, #64]	; (8002394 <HAL_MspInit+0x4c>)
 8002354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002356:	4a0f      	ldr	r2, [pc, #60]	; (8002394 <HAL_MspInit+0x4c>)
 8002358:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800235c:	6453      	str	r3, [r2, #68]	; 0x44
 800235e:	4b0d      	ldr	r3, [pc, #52]	; (8002394 <HAL_MspInit+0x4c>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002366:	607b      	str	r3, [r7, #4]
 8002368:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	603b      	str	r3, [r7, #0]
 800236e:	4b09      	ldr	r3, [pc, #36]	; (8002394 <HAL_MspInit+0x4c>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	4a08      	ldr	r2, [pc, #32]	; (8002394 <HAL_MspInit+0x4c>)
 8002374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002378:	6413      	str	r3, [r2, #64]	; 0x40
 800237a:	4b06      	ldr	r3, [pc, #24]	; (8002394 <HAL_MspInit+0x4c>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002382:	603b      	str	r3, [r7, #0]
 8002384:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	40023800 	.word	0x40023800

08002398 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08c      	sub	sp, #48	; 0x30
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a0:	f107 031c 	add.w	r3, r7, #28
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	60da      	str	r2, [r3, #12]
 80023ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a32      	ldr	r2, [pc, #200]	; (8002480 <HAL_UART_MspInit+0xe8>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d12d      	bne.n	8002416 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	61bb      	str	r3, [r7, #24]
 80023be:	4b31      	ldr	r3, [pc, #196]	; (8002484 <HAL_UART_MspInit+0xec>)
 80023c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c2:	4a30      	ldr	r2, [pc, #192]	; (8002484 <HAL_UART_MspInit+0xec>)
 80023c4:	f043 0310 	orr.w	r3, r3, #16
 80023c8:	6453      	str	r3, [r2, #68]	; 0x44
 80023ca:	4b2e      	ldr	r3, [pc, #184]	; (8002484 <HAL_UART_MspInit+0xec>)
 80023cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ce:	f003 0310 	and.w	r3, r3, #16
 80023d2:	61bb      	str	r3, [r7, #24]
 80023d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	617b      	str	r3, [r7, #20]
 80023da:	4b2a      	ldr	r3, [pc, #168]	; (8002484 <HAL_UART_MspInit+0xec>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	4a29      	ldr	r2, [pc, #164]	; (8002484 <HAL_UART_MspInit+0xec>)
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	6313      	str	r3, [r2, #48]	; 0x30
 80023e6:	4b27      	ldr	r3, [pc, #156]	; (8002484 <HAL_UART_MspInit+0xec>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	617b      	str	r3, [r7, #20]
 80023f0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023f2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f8:	2302      	movs	r3, #2
 80023fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fc:	2300      	movs	r3, #0
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002400:	2303      	movs	r3, #3
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002404:	2307      	movs	r3, #7
 8002406:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002408:	f107 031c 	add.w	r3, r7, #28
 800240c:	4619      	mov	r1, r3
 800240e:	481e      	ldr	r0, [pc, #120]	; (8002488 <HAL_UART_MspInit+0xf0>)
 8002410:	f000 fae2 	bl	80029d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002414:	e030      	b.n	8002478 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a1c      	ldr	r2, [pc, #112]	; (800248c <HAL_UART_MspInit+0xf4>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d12b      	bne.n	8002478 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002420:	2300      	movs	r3, #0
 8002422:	613b      	str	r3, [r7, #16]
 8002424:	4b17      	ldr	r3, [pc, #92]	; (8002484 <HAL_UART_MspInit+0xec>)
 8002426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002428:	4a16      	ldr	r2, [pc, #88]	; (8002484 <HAL_UART_MspInit+0xec>)
 800242a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800242e:	6413      	str	r3, [r2, #64]	; 0x40
 8002430:	4b14      	ldr	r3, [pc, #80]	; (8002484 <HAL_UART_MspInit+0xec>)
 8002432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002438:	613b      	str	r3, [r7, #16]
 800243a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243c:	2300      	movs	r3, #0
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	4b10      	ldr	r3, [pc, #64]	; (8002484 <HAL_UART_MspInit+0xec>)
 8002442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002444:	4a0f      	ldr	r2, [pc, #60]	; (8002484 <HAL_UART_MspInit+0xec>)
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	6313      	str	r3, [r2, #48]	; 0x30
 800244c:	4b0d      	ldr	r3, [pc, #52]	; (8002484 <HAL_UART_MspInit+0xec>)
 800244e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	60fb      	str	r3, [r7, #12]
 8002456:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002458:	230c      	movs	r3, #12
 800245a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245c:	2302      	movs	r3, #2
 800245e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002464:	2303      	movs	r3, #3
 8002466:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002468:	2307      	movs	r3, #7
 800246a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246c:	f107 031c 	add.w	r3, r7, #28
 8002470:	4619      	mov	r1, r3
 8002472:	4805      	ldr	r0, [pc, #20]	; (8002488 <HAL_UART_MspInit+0xf0>)
 8002474:	f000 fab0 	bl	80029d8 <HAL_GPIO_Init>
}
 8002478:	bf00      	nop
 800247a:	3730      	adds	r7, #48	; 0x30
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40011000 	.word	0x40011000
 8002484:	40023800 	.word	0x40023800
 8002488:	40020000 	.word	0x40020000
 800248c:	40004400 	.word	0x40004400

08002490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800249e:	b480      	push	{r7}
 80024a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024a2:	e7fe      	b.n	80024a2 <HardFault_Handler+0x4>

080024a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024a8:	e7fe      	b.n	80024a8 <MemManage_Handler+0x4>

080024aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024ae:	e7fe      	b.n	80024ae <BusFault_Handler+0x4>

080024b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024b4:	e7fe      	b.n	80024b4 <UsageFault_Handler+0x4>

080024b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024b6:	b480      	push	{r7}
 80024b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024d2:	b480      	push	{r7}
 80024d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024e4:	f000 f8ec 	bl	80026c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024e8:	bf00      	nop
 80024ea:	bd80      	pop	{r7, pc}

080024ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
	return 1;
 80024f0:	2301      	movs	r3, #1
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <_kill>:

int _kill(int pid, int sig)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002506:	f001 fe67 	bl	80041d8 <__errno>
 800250a:	4602      	mov	r2, r0
 800250c:	2316      	movs	r3, #22
 800250e:	6013      	str	r3, [r2, #0]
	return -1;
 8002510:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002514:	4618      	mov	r0, r3
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <_exit>:

void _exit (int status)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002524:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7ff ffe7 	bl	80024fc <_kill>
	while (1) {}		/* Make sure we hang here */
 800252e:	e7fe      	b.n	800252e <_exit+0x12>

08002530 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002538:	4a14      	ldr	r2, [pc, #80]	; (800258c <_sbrk+0x5c>)
 800253a:	4b15      	ldr	r3, [pc, #84]	; (8002590 <_sbrk+0x60>)
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002544:	4b13      	ldr	r3, [pc, #76]	; (8002594 <_sbrk+0x64>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d102      	bne.n	8002552 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800254c:	4b11      	ldr	r3, [pc, #68]	; (8002594 <_sbrk+0x64>)
 800254e:	4a12      	ldr	r2, [pc, #72]	; (8002598 <_sbrk+0x68>)
 8002550:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002552:	4b10      	ldr	r3, [pc, #64]	; (8002594 <_sbrk+0x64>)
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4413      	add	r3, r2
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	429a      	cmp	r2, r3
 800255e:	d207      	bcs.n	8002570 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002560:	f001 fe3a 	bl	80041d8 <__errno>
 8002564:	4602      	mov	r2, r0
 8002566:	230c      	movs	r3, #12
 8002568:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800256a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800256e:	e009      	b.n	8002584 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002570:	4b08      	ldr	r3, [pc, #32]	; (8002594 <_sbrk+0x64>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002576:	4b07      	ldr	r3, [pc, #28]	; (8002594 <_sbrk+0x64>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	4a05      	ldr	r2, [pc, #20]	; (8002594 <_sbrk+0x64>)
 8002580:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002582:	68fb      	ldr	r3, [r7, #12]
}
 8002584:	4618      	mov	r0, r3
 8002586:	3718      	adds	r7, #24
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	20020000 	.word	0x20020000
 8002590:	00000400 	.word	0x00000400
 8002594:	200009ec 	.word	0x200009ec
 8002598:	20000a80 	.word	0x20000a80

0800259c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025a0:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <SystemInit+0x28>)
 80025a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a6:	4a07      	ldr	r2, [pc, #28]	; (80025c4 <SystemInit+0x28>)
 80025a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025b0:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <SystemInit+0x28>)
 80025b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025b6:	609a      	str	r2, [r3, #8]
#endif
}
 80025b8:	bf00      	nop
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80025c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002600 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80025cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80025ce:	e003      	b.n	80025d8 <LoopCopyDataInit>

080025d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80025d0:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80025d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80025d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80025d6:	3104      	adds	r1, #4

080025d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80025d8:	480b      	ldr	r0, [pc, #44]	; (8002608 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80025da:	4b0c      	ldr	r3, [pc, #48]	; (800260c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80025dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80025de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80025e0:	d3f6      	bcc.n	80025d0 <CopyDataInit>
  ldr  r2, =_sbss
 80025e2:	4a0b      	ldr	r2, [pc, #44]	; (8002610 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80025e4:	e002      	b.n	80025ec <LoopFillZerobss>

080025e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80025e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80025e8:	f842 3b04 	str.w	r3, [r2], #4

080025ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80025ec:	4b09      	ldr	r3, [pc, #36]	; (8002614 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80025ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80025f0:	d3f9      	bcc.n	80025e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80025f2:	f7ff ffd3 	bl	800259c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025f6:	f001 fdf5 	bl	80041e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025fa:	f7fd ff99 	bl	8000530 <main>
  bx  lr    
 80025fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002600:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002604:	0800474c 	.word	0x0800474c
  ldr  r0, =_sdata
 8002608:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800260c:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8002610:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8002614:	20000a80 	.word	0x20000a80

08002618 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002618:	e7fe      	b.n	8002618 <ADC_IRQHandler>
	...

0800261c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002620:	4b0e      	ldr	r3, [pc, #56]	; (800265c <HAL_Init+0x40>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a0d      	ldr	r2, [pc, #52]	; (800265c <HAL_Init+0x40>)
 8002626:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800262a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <HAL_Init+0x40>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a0a      	ldr	r2, [pc, #40]	; (800265c <HAL_Init+0x40>)
 8002632:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002636:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002638:	4b08      	ldr	r3, [pc, #32]	; (800265c <HAL_Init+0x40>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a07      	ldr	r2, [pc, #28]	; (800265c <HAL_Init+0x40>)
 800263e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002642:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002644:	2003      	movs	r0, #3
 8002646:	f000 f90d 	bl	8002864 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800264a:	2000      	movs	r0, #0
 800264c:	f000 f808 	bl	8002660 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002650:	f7ff fe7a 	bl	8002348 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40023c00 	.word	0x40023c00

08002660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002668:	4b12      	ldr	r3, [pc, #72]	; (80026b4 <HAL_InitTick+0x54>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <HAL_InitTick+0x58>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	4619      	mov	r1, r3
 8002672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002676:	fbb3 f3f1 	udiv	r3, r3, r1
 800267a:	fbb2 f3f3 	udiv	r3, r2, r3
 800267e:	4618      	mov	r0, r3
 8002680:	f000 f917 	bl	80028b2 <HAL_SYSTICK_Config>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e00e      	b.n	80026ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b0f      	cmp	r3, #15
 8002692:	d80a      	bhi.n	80026aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002694:	2200      	movs	r2, #0
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800269c:	f000 f8ed 	bl	800287a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026a0:	4a06      	ldr	r2, [pc, #24]	; (80026bc <HAL_InitTick+0x5c>)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
 80026a8:	e000      	b.n	80026ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	20000000 	.word	0x20000000
 80026b8:	20000008 	.word	0x20000008
 80026bc:	20000004 	.word	0x20000004

080026c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026c4:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <HAL_IncTick+0x20>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	461a      	mov	r2, r3
 80026ca:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <HAL_IncTick+0x24>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4413      	add	r3, r2
 80026d0:	4a04      	ldr	r2, [pc, #16]	; (80026e4 <HAL_IncTick+0x24>)
 80026d2:	6013      	str	r3, [r2, #0]
}
 80026d4:	bf00      	nop
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	20000008 	.word	0x20000008
 80026e4:	20000a78 	.word	0x20000a78

080026e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  return uwTick;
 80026ec:	4b03      	ldr	r3, [pc, #12]	; (80026fc <HAL_GetTick+0x14>)
 80026ee:	681b      	ldr	r3, [r3, #0]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	20000a78 	.word	0x20000a78

08002700 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002710:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <__NVIC_SetPriorityGrouping+0x44>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800271c:	4013      	ands	r3, r2
 800271e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002728:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800272c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002732:	4a04      	ldr	r2, [pc, #16]	; (8002744 <__NVIC_SetPriorityGrouping+0x44>)
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	60d3      	str	r3, [r2, #12]
}
 8002738:	bf00      	nop
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800274c:	4b04      	ldr	r3, [pc, #16]	; (8002760 <__NVIC_GetPriorityGrouping+0x18>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	0a1b      	lsrs	r3, r3, #8
 8002752:	f003 0307 	and.w	r3, r3, #7
}
 8002756:	4618      	mov	r0, r3
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	e000ed00 	.word	0xe000ed00

08002764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	6039      	str	r1, [r7, #0]
 800276e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002774:	2b00      	cmp	r3, #0
 8002776:	db0a      	blt.n	800278e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	b2da      	uxtb	r2, r3
 800277c:	490c      	ldr	r1, [pc, #48]	; (80027b0 <__NVIC_SetPriority+0x4c>)
 800277e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002782:	0112      	lsls	r2, r2, #4
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	440b      	add	r3, r1
 8002788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800278c:	e00a      	b.n	80027a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	b2da      	uxtb	r2, r3
 8002792:	4908      	ldr	r1, [pc, #32]	; (80027b4 <__NVIC_SetPriority+0x50>)
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	3b04      	subs	r3, #4
 800279c:	0112      	lsls	r2, r2, #4
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	440b      	add	r3, r1
 80027a2:	761a      	strb	r2, [r3, #24]
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	e000e100 	.word	0xe000e100
 80027b4:	e000ed00 	.word	0xe000ed00

080027b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b089      	sub	sp, #36	; 0x24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	f1c3 0307 	rsb	r3, r3, #7
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	bf28      	it	cs
 80027d6:	2304      	movcs	r3, #4
 80027d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	3304      	adds	r3, #4
 80027de:	2b06      	cmp	r3, #6
 80027e0:	d902      	bls.n	80027e8 <NVIC_EncodePriority+0x30>
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	3b03      	subs	r3, #3
 80027e6:	e000      	b.n	80027ea <NVIC_EncodePriority+0x32>
 80027e8:	2300      	movs	r3, #0
 80027ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43da      	mvns	r2, r3
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	401a      	ands	r2, r3
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002800:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	fa01 f303 	lsl.w	r3, r1, r3
 800280a:	43d9      	mvns	r1, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002810:	4313      	orrs	r3, r2
         );
}
 8002812:	4618      	mov	r0, r3
 8002814:	3724      	adds	r7, #36	; 0x24
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
	...

08002820 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3b01      	subs	r3, #1
 800282c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002830:	d301      	bcc.n	8002836 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002832:	2301      	movs	r3, #1
 8002834:	e00f      	b.n	8002856 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002836:	4a0a      	ldr	r2, [pc, #40]	; (8002860 <SysTick_Config+0x40>)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	3b01      	subs	r3, #1
 800283c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800283e:	210f      	movs	r1, #15
 8002840:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002844:	f7ff ff8e 	bl	8002764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002848:	4b05      	ldr	r3, [pc, #20]	; (8002860 <SysTick_Config+0x40>)
 800284a:	2200      	movs	r2, #0
 800284c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800284e:	4b04      	ldr	r3, [pc, #16]	; (8002860 <SysTick_Config+0x40>)
 8002850:	2207      	movs	r2, #7
 8002852:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	e000e010 	.word	0xe000e010

08002864 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7ff ff47 	bl	8002700 <__NVIC_SetPriorityGrouping>
}
 8002872:	bf00      	nop
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800287a:	b580      	push	{r7, lr}
 800287c:	b086      	sub	sp, #24
 800287e:	af00      	add	r7, sp, #0
 8002880:	4603      	mov	r3, r0
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	607a      	str	r2, [r7, #4]
 8002886:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800288c:	f7ff ff5c 	bl	8002748 <__NVIC_GetPriorityGrouping>
 8002890:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	68b9      	ldr	r1, [r7, #8]
 8002896:	6978      	ldr	r0, [r7, #20]
 8002898:	f7ff ff8e 	bl	80027b8 <NVIC_EncodePriority>
 800289c:	4602      	mov	r2, r0
 800289e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028a2:	4611      	mov	r1, r2
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff ff5d 	bl	8002764 <__NVIC_SetPriority>
}
 80028aa:	bf00      	nop
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b082      	sub	sp, #8
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7ff ffb0 	bl	8002820 <SysTick_Config>
 80028c0:	4603      	mov	r3, r0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b086      	sub	sp, #24
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	60f8      	str	r0, [r7, #12]
 80028d2:	60b9      	str	r1, [r7, #8]
 80028d4:	607a      	str	r2, [r7, #4]
 80028d6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028d8:	2300      	movs	r3, #0
 80028da:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d101      	bne.n	80028f0 <HAL_DMA_Start_IT+0x26>
 80028ec:	2302      	movs	r3, #2
 80028ee:	e040      	b.n	8002972 <HAL_DMA_Start_IT+0xa8>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b01      	cmp	r3, #1
 8002902:	d12f      	bne.n	8002964 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2202      	movs	r2, #2
 8002908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	68b9      	ldr	r1, [r7, #8]
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 f82e 	bl	800297a <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002922:	223f      	movs	r2, #63	; 0x3f
 8002924:	409a      	lsls	r2, r3
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f042 0216 	orr.w	r2, r2, #22
 8002938:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	2b00      	cmp	r3, #0
 8002940:	d007      	beq.n	8002952 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f042 0208 	orr.w	r2, r2, #8
 8002950:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f042 0201 	orr.w	r2, r2, #1
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	e005      	b.n	8002970 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800296c:	2302      	movs	r3, #2
 800296e:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002970:	7dfb      	ldrb	r3, [r7, #23]
}
 8002972:	4618      	mov	r0, r3
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800297a:	b480      	push	{r7}
 800297c:	b085      	sub	sp, #20
 800297e:	af00      	add	r7, sp, #0
 8002980:	60f8      	str	r0, [r7, #12]
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	607a      	str	r2, [r7, #4]
 8002986:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002996:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	2b40      	cmp	r3, #64	; 0x40
 80029a6:	d108      	bne.n	80029ba <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029b8:	e007      	b.n	80029ca <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	60da      	str	r2, [r3, #12]
}
 80029ca:	bf00      	nop
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
	...

080029d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029d8:	b480      	push	{r7}
 80029da:	b089      	sub	sp, #36	; 0x24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ee:	2300      	movs	r3, #0
 80029f0:	61fb      	str	r3, [r7, #28]
 80029f2:	e16b      	b.n	8002ccc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029f4:	2201      	movs	r2, #1
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	4013      	ands	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	f040 815a 	bne.w	8002cc6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d00b      	beq.n	8002a32 <HAL_GPIO_Init+0x5a>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d007      	beq.n	8002a32 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a26:	2b11      	cmp	r3, #17
 8002a28:	d003      	beq.n	8002a32 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b12      	cmp	r3, #18
 8002a30:	d130      	bne.n	8002a94 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	2203      	movs	r2, #3
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	43db      	mvns	r3, r3
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	4013      	ands	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	68da      	ldr	r2, [r3, #12]
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a68:	2201      	movs	r2, #1
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	43db      	mvns	r3, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4013      	ands	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	091b      	lsrs	r3, r3, #4
 8002a7e:	f003 0201 	and.w	r2, r3, #1
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	2203      	movs	r2, #3
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d003      	beq.n	8002ad4 <HAL_GPIO_Init+0xfc>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2b12      	cmp	r3, #18
 8002ad2:	d123      	bne.n	8002b1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	08da      	lsrs	r2, r3, #3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3208      	adds	r2, #8
 8002adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	220f      	movs	r2, #15
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	43db      	mvns	r3, r3
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4013      	ands	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	691a      	ldr	r2, [r3, #16]
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	08da      	lsrs	r2, r3, #3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	3208      	adds	r2, #8
 8002b16:	69b9      	ldr	r1, [r7, #24]
 8002b18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	2203      	movs	r2, #3
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4013      	ands	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 0203 	and.w	r2, r3, #3
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 80b4 	beq.w	8002cc6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	4b5f      	ldr	r3, [pc, #380]	; (8002ce0 <HAL_GPIO_Init+0x308>)
 8002b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b66:	4a5e      	ldr	r2, [pc, #376]	; (8002ce0 <HAL_GPIO_Init+0x308>)
 8002b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b6e:	4b5c      	ldr	r3, [pc, #368]	; (8002ce0 <HAL_GPIO_Init+0x308>)
 8002b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b7a:	4a5a      	ldr	r2, [pc, #360]	; (8002ce4 <HAL_GPIO_Init+0x30c>)
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	089b      	lsrs	r3, r3, #2
 8002b80:	3302      	adds	r3, #2
 8002b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	220f      	movs	r2, #15
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	43db      	mvns	r3, r3
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a51      	ldr	r2, [pc, #324]	; (8002ce8 <HAL_GPIO_Init+0x310>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d02b      	beq.n	8002bfe <HAL_GPIO_Init+0x226>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a50      	ldr	r2, [pc, #320]	; (8002cec <HAL_GPIO_Init+0x314>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d025      	beq.n	8002bfa <HAL_GPIO_Init+0x222>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a4f      	ldr	r2, [pc, #316]	; (8002cf0 <HAL_GPIO_Init+0x318>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d01f      	beq.n	8002bf6 <HAL_GPIO_Init+0x21e>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a4e      	ldr	r2, [pc, #312]	; (8002cf4 <HAL_GPIO_Init+0x31c>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d019      	beq.n	8002bf2 <HAL_GPIO_Init+0x21a>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a4d      	ldr	r2, [pc, #308]	; (8002cf8 <HAL_GPIO_Init+0x320>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d013      	beq.n	8002bee <HAL_GPIO_Init+0x216>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a4c      	ldr	r2, [pc, #304]	; (8002cfc <HAL_GPIO_Init+0x324>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d00d      	beq.n	8002bea <HAL_GPIO_Init+0x212>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a4b      	ldr	r2, [pc, #300]	; (8002d00 <HAL_GPIO_Init+0x328>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d007      	beq.n	8002be6 <HAL_GPIO_Init+0x20e>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a4a      	ldr	r2, [pc, #296]	; (8002d04 <HAL_GPIO_Init+0x32c>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d101      	bne.n	8002be2 <HAL_GPIO_Init+0x20a>
 8002bde:	2307      	movs	r3, #7
 8002be0:	e00e      	b.n	8002c00 <HAL_GPIO_Init+0x228>
 8002be2:	2308      	movs	r3, #8
 8002be4:	e00c      	b.n	8002c00 <HAL_GPIO_Init+0x228>
 8002be6:	2306      	movs	r3, #6
 8002be8:	e00a      	b.n	8002c00 <HAL_GPIO_Init+0x228>
 8002bea:	2305      	movs	r3, #5
 8002bec:	e008      	b.n	8002c00 <HAL_GPIO_Init+0x228>
 8002bee:	2304      	movs	r3, #4
 8002bf0:	e006      	b.n	8002c00 <HAL_GPIO_Init+0x228>
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e004      	b.n	8002c00 <HAL_GPIO_Init+0x228>
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	e002      	b.n	8002c00 <HAL_GPIO_Init+0x228>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e000      	b.n	8002c00 <HAL_GPIO_Init+0x228>
 8002bfe:	2300      	movs	r3, #0
 8002c00:	69fa      	ldr	r2, [r7, #28]
 8002c02:	f002 0203 	and.w	r2, r2, #3
 8002c06:	0092      	lsls	r2, r2, #2
 8002c08:	4093      	lsls	r3, r2
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c10:	4934      	ldr	r1, [pc, #208]	; (8002ce4 <HAL_GPIO_Init+0x30c>)
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	089b      	lsrs	r3, r3, #2
 8002c16:	3302      	adds	r3, #2
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c1e:	4b3a      	ldr	r3, [pc, #232]	; (8002d08 <HAL_GPIO_Init+0x330>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	43db      	mvns	r3, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c42:	4a31      	ldr	r2, [pc, #196]	; (8002d08 <HAL_GPIO_Init+0x330>)
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c48:	4b2f      	ldr	r3, [pc, #188]	; (8002d08 <HAL_GPIO_Init+0x330>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c6c:	4a26      	ldr	r2, [pc, #152]	; (8002d08 <HAL_GPIO_Init+0x330>)
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c72:	4b25      	ldr	r3, [pc, #148]	; (8002d08 <HAL_GPIO_Init+0x330>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c96:	4a1c      	ldr	r2, [pc, #112]	; (8002d08 <HAL_GPIO_Init+0x330>)
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c9c:	4b1a      	ldr	r3, [pc, #104]	; (8002d08 <HAL_GPIO_Init+0x330>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cc0:	4a11      	ldr	r2, [pc, #68]	; (8002d08 <HAL_GPIO_Init+0x330>)
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	61fb      	str	r3, [r7, #28]
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	2b0f      	cmp	r3, #15
 8002cd0:	f67f ae90 	bls.w	80029f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cd4:	bf00      	nop
 8002cd6:	3724      	adds	r7, #36	; 0x24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	40013800 	.word	0x40013800
 8002ce8:	40020000 	.word	0x40020000
 8002cec:	40020400 	.word	0x40020400
 8002cf0:	40020800 	.word	0x40020800
 8002cf4:	40020c00 	.word	0x40020c00
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	40021400 	.word	0x40021400
 8002d00:	40021800 	.word	0x40021800
 8002d04:	40021c00 	.word	0x40021c00
 8002d08:	40013c00 	.word	0x40013c00

08002d0c <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	460b      	mov	r3, r1
 8002d16:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	695a      	ldr	r2, [r3, #20]
 8002d1c:	887b      	ldrh	r3, [r7, #2]
 8002d1e:	401a      	ands	r2, r3
 8002d20:	887b      	ldrh	r3, [r7, #2]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d104      	bne.n	8002d30 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002d26:	887b      	ldrh	r3, [r7, #2]
 8002d28:	041a      	lsls	r2, r3, #16
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002d2e:	e002      	b.n	8002d36 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002d30:	887a      	ldrh	r2, [r7, #2]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	619a      	str	r2, [r3, #24]
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
	...

08002d44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e25b      	b.n	800320e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d075      	beq.n	8002e4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d62:	4ba3      	ldr	r3, [pc, #652]	; (8002ff0 <HAL_RCC_OscConfig+0x2ac>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 030c 	and.w	r3, r3, #12
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d00c      	beq.n	8002d88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d6e:	4ba0      	ldr	r3, [pc, #640]	; (8002ff0 <HAL_RCC_OscConfig+0x2ac>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d76:	2b08      	cmp	r3, #8
 8002d78:	d112      	bne.n	8002da0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d7a:	4b9d      	ldr	r3, [pc, #628]	; (8002ff0 <HAL_RCC_OscConfig+0x2ac>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d86:	d10b      	bne.n	8002da0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d88:	4b99      	ldr	r3, [pc, #612]	; (8002ff0 <HAL_RCC_OscConfig+0x2ac>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d05b      	beq.n	8002e4c <HAL_RCC_OscConfig+0x108>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d157      	bne.n	8002e4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e236      	b.n	800320e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da8:	d106      	bne.n	8002db8 <HAL_RCC_OscConfig+0x74>
 8002daa:	4b91      	ldr	r3, [pc, #580]	; (8002ff0 <HAL_RCC_OscConfig+0x2ac>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a90      	ldr	r2, [pc, #576]	; (8002ff0 <HAL_RCC_OscConfig+0x2ac>)
 8002db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	e01d      	b.n	8002df4 <HAL_RCC_OscConfig+0xb0>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dc0:	d10c      	bne.n	8002ddc <HAL_RCC_OscConfig+0x98>
 8002dc2:	4b8b      	ldr	r3, [pc, #556]	; (8002ff0 <HAL_RCC_OscConfig+0x2ac>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a8a      	ldr	r2, [pc, #552]	; (8002ff0 <HAL_RCC_OscConfig+0x2ac>)
 8002dc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	4b88      	ldr	r3, [pc, #544]	; (8002ff0 <HAL_RCC_OscConfig+0x2ac>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a87      	ldr	r2, [pc, #540]	; (8002ff0 <HAL_RCC_OscConfig+0x2ac>)
 8002dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	e00b      	b.n	8002df4 <HAL_RCC_OscConfig+0xb0>
 8002ddc:	4b84      	ldr	r3, [pc, #528]	; (8002ff0 <HAL_RCC_OscConfig+0x2ac>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a83      	ldr	r2, [pc, #524]	; (8002ff0 <HAL_RCC_OscConfig+0x2ac>)
 8002de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002de6:	6013      	str	r3, [r2, #0]
 8002de8:	4b81      	ldr	r3, [pc, #516]	; (8002ff0 <HAL_RCC_OscConfig+0x2ac>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a80      	ldr	r2, [pc, #512]	; (8002ff0 <HAL_RCC_OscConfig+0x2ac>)
 8002dee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002df2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d013      	beq.n	8002e24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfc:	f7ff fc74 	bl	80026e8 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e04:	f7ff fc70 	bl	80026e8 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b64      	cmp	r3, #100	; 0x64
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e1fb      	b.n	800320e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e16:	4b76      	ldr	r3, [pc, #472]	; (8002ff0 <HAL_RCC_OscConfig+0x2ac>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0f0      	beq.n	8002e04 <HAL_RCC_OscConfig+0xc0>
 8002e22:	e014      	b.n	8002e4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e24:	f7ff fc60 	bl	80026e8 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e2c:	f7ff fc5c 	bl	80026e8 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b64      	cmp	r3, #100	; 0x64
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e1e7      	b.n	800320e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e3e:	4b6c      	ldr	r3, [pc, #432]	; (8002ff0 <HAL_RCC_OscConfig+0x2ac>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0xe8>
 8002e4a:	e000      	b.n	8002e4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d063      	beq.n	8002f22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e5a:	4b65      	ldr	r3, [pc, #404]	; (8002ff0 <HAL_RCC_OscConfig+0x2ac>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 030c 	and.w	r3, r3, #12
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00b      	beq.n	8002e7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e66:	4b62      	ldr	r3, [pc, #392]	; (8002ff0 <HAL_RCC_OscConfig+0x2ac>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e6e:	2b08      	cmp	r3, #8
 8002e70:	d11c      	bne.n	8002eac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e72:	4b5f      	ldr	r3, [pc, #380]	; (8002ff0 <HAL_RCC_OscConfig+0x2ac>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d116      	bne.n	8002eac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e7e:	4b5c      	ldr	r3, [pc, #368]	; (8002ff0 <HAL_RCC_OscConfig+0x2ac>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d005      	beq.n	8002e96 <HAL_RCC_OscConfig+0x152>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d001      	beq.n	8002e96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e1bb      	b.n	800320e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e96:	4b56      	ldr	r3, [pc, #344]	; (8002ff0 <HAL_RCC_OscConfig+0x2ac>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	4952      	ldr	r1, [pc, #328]	; (8002ff0 <HAL_RCC_OscConfig+0x2ac>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eaa:	e03a      	b.n	8002f22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d020      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eb4:	4b4f      	ldr	r3, [pc, #316]	; (8002ff4 <HAL_RCC_OscConfig+0x2b0>)
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eba:	f7ff fc15 	bl	80026e8 <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ec2:	f7ff fc11 	bl	80026e8 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e19c      	b.n	800320e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed4:	4b46      	ldr	r3, [pc, #280]	; (8002ff0 <HAL_RCC_OscConfig+0x2ac>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0f0      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ee0:	4b43      	ldr	r3, [pc, #268]	; (8002ff0 <HAL_RCC_OscConfig+0x2ac>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	4940      	ldr	r1, [pc, #256]	; (8002ff0 <HAL_RCC_OscConfig+0x2ac>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	600b      	str	r3, [r1, #0]
 8002ef4:	e015      	b.n	8002f22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ef6:	4b3f      	ldr	r3, [pc, #252]	; (8002ff4 <HAL_RCC_OscConfig+0x2b0>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efc:	f7ff fbf4 	bl	80026e8 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f04:	f7ff fbf0 	bl	80026e8 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e17b      	b.n	800320e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f16:	4b36      	ldr	r3, [pc, #216]	; (8002ff0 <HAL_RCC_OscConfig+0x2ac>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f0      	bne.n	8002f04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d030      	beq.n	8002f90 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d016      	beq.n	8002f64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f36:	4b30      	ldr	r3, [pc, #192]	; (8002ff8 <HAL_RCC_OscConfig+0x2b4>)
 8002f38:	2201      	movs	r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3c:	f7ff fbd4 	bl	80026e8 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f44:	f7ff fbd0 	bl	80026e8 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e15b      	b.n	800320e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f56:	4b26      	ldr	r3, [pc, #152]	; (8002ff0 <HAL_RCC_OscConfig+0x2ac>)
 8002f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0f0      	beq.n	8002f44 <HAL_RCC_OscConfig+0x200>
 8002f62:	e015      	b.n	8002f90 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f64:	4b24      	ldr	r3, [pc, #144]	; (8002ff8 <HAL_RCC_OscConfig+0x2b4>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f6a:	f7ff fbbd 	bl	80026e8 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f72:	f7ff fbb9 	bl	80026e8 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e144      	b.n	800320e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f84:	4b1a      	ldr	r3, [pc, #104]	; (8002ff0 <HAL_RCC_OscConfig+0x2ac>)
 8002f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1f0      	bne.n	8002f72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 80a0 	beq.w	80030de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fa2:	4b13      	ldr	r3, [pc, #76]	; (8002ff0 <HAL_RCC_OscConfig+0x2ac>)
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10f      	bne.n	8002fce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60bb      	str	r3, [r7, #8]
 8002fb2:	4b0f      	ldr	r3, [pc, #60]	; (8002ff0 <HAL_RCC_OscConfig+0x2ac>)
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	4a0e      	ldr	r2, [pc, #56]	; (8002ff0 <HAL_RCC_OscConfig+0x2ac>)
 8002fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002fbe:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <HAL_RCC_OscConfig+0x2ac>)
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc6:	60bb      	str	r3, [r7, #8]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fce:	4b0b      	ldr	r3, [pc, #44]	; (8002ffc <HAL_RCC_OscConfig+0x2b8>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d121      	bne.n	800301e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fda:	4b08      	ldr	r3, [pc, #32]	; (8002ffc <HAL_RCC_OscConfig+0x2b8>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a07      	ldr	r2, [pc, #28]	; (8002ffc <HAL_RCC_OscConfig+0x2b8>)
 8002fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fe6:	f7ff fb7f 	bl	80026e8 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fec:	e011      	b.n	8003012 <HAL_RCC_OscConfig+0x2ce>
 8002fee:	bf00      	nop
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	42470000 	.word	0x42470000
 8002ff8:	42470e80 	.word	0x42470e80
 8002ffc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003000:	f7ff fb72 	bl	80026e8 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e0fd      	b.n	800320e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003012:	4b81      	ldr	r3, [pc, #516]	; (8003218 <HAL_RCC_OscConfig+0x4d4>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0f0      	beq.n	8003000 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d106      	bne.n	8003034 <HAL_RCC_OscConfig+0x2f0>
 8003026:	4b7d      	ldr	r3, [pc, #500]	; (800321c <HAL_RCC_OscConfig+0x4d8>)
 8003028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302a:	4a7c      	ldr	r2, [pc, #496]	; (800321c <HAL_RCC_OscConfig+0x4d8>)
 800302c:	f043 0301 	orr.w	r3, r3, #1
 8003030:	6713      	str	r3, [r2, #112]	; 0x70
 8003032:	e01c      	b.n	800306e <HAL_RCC_OscConfig+0x32a>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	2b05      	cmp	r3, #5
 800303a:	d10c      	bne.n	8003056 <HAL_RCC_OscConfig+0x312>
 800303c:	4b77      	ldr	r3, [pc, #476]	; (800321c <HAL_RCC_OscConfig+0x4d8>)
 800303e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003040:	4a76      	ldr	r2, [pc, #472]	; (800321c <HAL_RCC_OscConfig+0x4d8>)
 8003042:	f043 0304 	orr.w	r3, r3, #4
 8003046:	6713      	str	r3, [r2, #112]	; 0x70
 8003048:	4b74      	ldr	r3, [pc, #464]	; (800321c <HAL_RCC_OscConfig+0x4d8>)
 800304a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304c:	4a73      	ldr	r2, [pc, #460]	; (800321c <HAL_RCC_OscConfig+0x4d8>)
 800304e:	f043 0301 	orr.w	r3, r3, #1
 8003052:	6713      	str	r3, [r2, #112]	; 0x70
 8003054:	e00b      	b.n	800306e <HAL_RCC_OscConfig+0x32a>
 8003056:	4b71      	ldr	r3, [pc, #452]	; (800321c <HAL_RCC_OscConfig+0x4d8>)
 8003058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305a:	4a70      	ldr	r2, [pc, #448]	; (800321c <HAL_RCC_OscConfig+0x4d8>)
 800305c:	f023 0301 	bic.w	r3, r3, #1
 8003060:	6713      	str	r3, [r2, #112]	; 0x70
 8003062:	4b6e      	ldr	r3, [pc, #440]	; (800321c <HAL_RCC_OscConfig+0x4d8>)
 8003064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003066:	4a6d      	ldr	r2, [pc, #436]	; (800321c <HAL_RCC_OscConfig+0x4d8>)
 8003068:	f023 0304 	bic.w	r3, r3, #4
 800306c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d015      	beq.n	80030a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003076:	f7ff fb37 	bl	80026e8 <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800307c:	e00a      	b.n	8003094 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800307e:	f7ff fb33 	bl	80026e8 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	f241 3288 	movw	r2, #5000	; 0x1388
 800308c:	4293      	cmp	r3, r2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e0bc      	b.n	800320e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003094:	4b61      	ldr	r3, [pc, #388]	; (800321c <HAL_RCC_OscConfig+0x4d8>)
 8003096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0ee      	beq.n	800307e <HAL_RCC_OscConfig+0x33a>
 80030a0:	e014      	b.n	80030cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a2:	f7ff fb21 	bl	80026e8 <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a8:	e00a      	b.n	80030c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030aa:	f7ff fb1d 	bl	80026e8 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e0a6      	b.n	800320e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030c0:	4b56      	ldr	r3, [pc, #344]	; (800321c <HAL_RCC_OscConfig+0x4d8>)
 80030c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1ee      	bne.n	80030aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030cc:	7dfb      	ldrb	r3, [r7, #23]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d105      	bne.n	80030de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030d2:	4b52      	ldr	r3, [pc, #328]	; (800321c <HAL_RCC_OscConfig+0x4d8>)
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	4a51      	ldr	r2, [pc, #324]	; (800321c <HAL_RCC_OscConfig+0x4d8>)
 80030d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f000 8092 	beq.w	800320c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030e8:	4b4c      	ldr	r3, [pc, #304]	; (800321c <HAL_RCC_OscConfig+0x4d8>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 030c 	and.w	r3, r3, #12
 80030f0:	2b08      	cmp	r3, #8
 80030f2:	d05c      	beq.n	80031ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d141      	bne.n	8003180 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030fc:	4b48      	ldr	r3, [pc, #288]	; (8003220 <HAL_RCC_OscConfig+0x4dc>)
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003102:	f7ff faf1 	bl	80026e8 <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800310a:	f7ff faed 	bl	80026e8 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e078      	b.n	800320e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800311c:	4b3f      	ldr	r3, [pc, #252]	; (800321c <HAL_RCC_OscConfig+0x4d8>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1f0      	bne.n	800310a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	69da      	ldr	r2, [r3, #28]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	431a      	orrs	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	019b      	lsls	r3, r3, #6
 8003138:	431a      	orrs	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313e:	085b      	lsrs	r3, r3, #1
 8003140:	3b01      	subs	r3, #1
 8003142:	041b      	lsls	r3, r3, #16
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314a:	061b      	lsls	r3, r3, #24
 800314c:	4933      	ldr	r1, [pc, #204]	; (800321c <HAL_RCC_OscConfig+0x4d8>)
 800314e:	4313      	orrs	r3, r2
 8003150:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003152:	4b33      	ldr	r3, [pc, #204]	; (8003220 <HAL_RCC_OscConfig+0x4dc>)
 8003154:	2201      	movs	r2, #1
 8003156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003158:	f7ff fac6 	bl	80026e8 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003160:	f7ff fac2 	bl	80026e8 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e04d      	b.n	800320e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003172:	4b2a      	ldr	r3, [pc, #168]	; (800321c <HAL_RCC_OscConfig+0x4d8>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0f0      	beq.n	8003160 <HAL_RCC_OscConfig+0x41c>
 800317e:	e045      	b.n	800320c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003180:	4b27      	ldr	r3, [pc, #156]	; (8003220 <HAL_RCC_OscConfig+0x4dc>)
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003186:	f7ff faaf 	bl	80026e8 <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800318e:	f7ff faab 	bl	80026e8 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e036      	b.n	800320e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a0:	4b1e      	ldr	r3, [pc, #120]	; (800321c <HAL_RCC_OscConfig+0x4d8>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1f0      	bne.n	800318e <HAL_RCC_OscConfig+0x44a>
 80031ac:	e02e      	b.n	800320c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d101      	bne.n	80031ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e029      	b.n	800320e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031ba:	4b18      	ldr	r3, [pc, #96]	; (800321c <HAL_RCC_OscConfig+0x4d8>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d11c      	bne.n	8003208 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031d8:	429a      	cmp	r2, r3
 80031da:	d115      	bne.n	8003208 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031e2:	4013      	ands	r3, r2
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d10d      	bne.n	8003208 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d106      	bne.n	8003208 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003204:	429a      	cmp	r2, r3
 8003206:	d001      	beq.n	800320c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e000      	b.n	800320e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3718      	adds	r7, #24
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40007000 	.word	0x40007000
 800321c:	40023800 	.word	0x40023800
 8003220:	42470060 	.word	0x42470060

08003224 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e0cc      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003238:	4b68      	ldr	r3, [pc, #416]	; (80033dc <HAL_RCC_ClockConfig+0x1b8>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 030f 	and.w	r3, r3, #15
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d90c      	bls.n	8003260 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003246:	4b65      	ldr	r3, [pc, #404]	; (80033dc <HAL_RCC_ClockConfig+0x1b8>)
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800324e:	4b63      	ldr	r3, [pc, #396]	; (80033dc <HAL_RCC_ClockConfig+0x1b8>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	429a      	cmp	r2, r3
 800325a:	d001      	beq.n	8003260 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e0b8      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d020      	beq.n	80032ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b00      	cmp	r3, #0
 8003276:	d005      	beq.n	8003284 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003278:	4b59      	ldr	r3, [pc, #356]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	4a58      	ldr	r2, [pc, #352]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003282:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0308 	and.w	r3, r3, #8
 800328c:	2b00      	cmp	r3, #0
 800328e:	d005      	beq.n	800329c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003290:	4b53      	ldr	r3, [pc, #332]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	4a52      	ldr	r2, [pc, #328]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800329a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800329c:	4b50      	ldr	r3, [pc, #320]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	494d      	ldr	r1, [pc, #308]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d044      	beq.n	8003344 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d107      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c2:	4b47      	ldr	r3, [pc, #284]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d119      	bne.n	8003302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e07f      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d003      	beq.n	80032e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032de:	2b03      	cmp	r3, #3
 80032e0:	d107      	bne.n	80032f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e2:	4b3f      	ldr	r3, [pc, #252]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d109      	bne.n	8003302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e06f      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f2:	4b3b      	ldr	r3, [pc, #236]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e067      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003302:	4b37      	ldr	r3, [pc, #220]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f023 0203 	bic.w	r2, r3, #3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	4934      	ldr	r1, [pc, #208]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003310:	4313      	orrs	r3, r2
 8003312:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003314:	f7ff f9e8 	bl	80026e8 <HAL_GetTick>
 8003318:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800331a:	e00a      	b.n	8003332 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800331c:	f7ff f9e4 	bl	80026e8 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	f241 3288 	movw	r2, #5000	; 0x1388
 800332a:	4293      	cmp	r3, r2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e04f      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003332:	4b2b      	ldr	r3, [pc, #172]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 020c 	and.w	r2, r3, #12
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	429a      	cmp	r2, r3
 8003342:	d1eb      	bne.n	800331c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003344:	4b25      	ldr	r3, [pc, #148]	; (80033dc <HAL_RCC_ClockConfig+0x1b8>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 030f 	and.w	r3, r3, #15
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d20c      	bcs.n	800336c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003352:	4b22      	ldr	r3, [pc, #136]	; (80033dc <HAL_RCC_ClockConfig+0x1b8>)
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800335a:	4b20      	ldr	r3, [pc, #128]	; (80033dc <HAL_RCC_ClockConfig+0x1b8>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	429a      	cmp	r2, r3
 8003366:	d001      	beq.n	800336c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e032      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d008      	beq.n	800338a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003378:	4b19      	ldr	r3, [pc, #100]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	4916      	ldr	r1, [pc, #88]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	4313      	orrs	r3, r2
 8003388:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0308 	and.w	r3, r3, #8
 8003392:	2b00      	cmp	r3, #0
 8003394:	d009      	beq.n	80033aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003396:	4b12      	ldr	r3, [pc, #72]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	490e      	ldr	r1, [pc, #56]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033aa:	f000 f821 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 80033ae:	4601      	mov	r1, r0
 80033b0:	4b0b      	ldr	r3, [pc, #44]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	091b      	lsrs	r3, r3, #4
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	4a0a      	ldr	r2, [pc, #40]	; (80033e4 <HAL_RCC_ClockConfig+0x1c0>)
 80033bc:	5cd3      	ldrb	r3, [r2, r3]
 80033be:	fa21 f303 	lsr.w	r3, r1, r3
 80033c2:	4a09      	ldr	r2, [pc, #36]	; (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 80033c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033c6:	4b09      	ldr	r3, [pc, #36]	; (80033ec <HAL_RCC_ClockConfig+0x1c8>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff f948 	bl	8002660 <HAL_InitTick>

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40023c00 	.word	0x40023c00
 80033e0:	40023800 	.word	0x40023800
 80033e4:	08004720 	.word	0x08004720
 80033e8:	20000000 	.word	0x20000000
 80033ec:	20000004 	.word	0x20000004

080033f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	607b      	str	r3, [r7, #4]
 80033fa:	2300      	movs	r3, #0
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	2300      	movs	r3, #0
 8003400:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003402:	2300      	movs	r3, #0
 8003404:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003406:	4b63      	ldr	r3, [pc, #396]	; (8003594 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 030c 	and.w	r3, r3, #12
 800340e:	2b04      	cmp	r3, #4
 8003410:	d007      	beq.n	8003422 <HAL_RCC_GetSysClockFreq+0x32>
 8003412:	2b08      	cmp	r3, #8
 8003414:	d008      	beq.n	8003428 <HAL_RCC_GetSysClockFreq+0x38>
 8003416:	2b00      	cmp	r3, #0
 8003418:	f040 80b4 	bne.w	8003584 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800341c:	4b5e      	ldr	r3, [pc, #376]	; (8003598 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800341e:	60bb      	str	r3, [r7, #8]
       break;
 8003420:	e0b3      	b.n	800358a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003422:	4b5e      	ldr	r3, [pc, #376]	; (800359c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003424:	60bb      	str	r3, [r7, #8]
      break;
 8003426:	e0b0      	b.n	800358a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003428:	4b5a      	ldr	r3, [pc, #360]	; (8003594 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003430:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003432:	4b58      	ldr	r3, [pc, #352]	; (8003594 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d04a      	beq.n	80034d4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800343e:	4b55      	ldr	r3, [pc, #340]	; (8003594 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	099b      	lsrs	r3, r3, #6
 8003444:	f04f 0400 	mov.w	r4, #0
 8003448:	f240 11ff 	movw	r1, #511	; 0x1ff
 800344c:	f04f 0200 	mov.w	r2, #0
 8003450:	ea03 0501 	and.w	r5, r3, r1
 8003454:	ea04 0602 	and.w	r6, r4, r2
 8003458:	4629      	mov	r1, r5
 800345a:	4632      	mov	r2, r6
 800345c:	f04f 0300 	mov.w	r3, #0
 8003460:	f04f 0400 	mov.w	r4, #0
 8003464:	0154      	lsls	r4, r2, #5
 8003466:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800346a:	014b      	lsls	r3, r1, #5
 800346c:	4619      	mov	r1, r3
 800346e:	4622      	mov	r2, r4
 8003470:	1b49      	subs	r1, r1, r5
 8003472:	eb62 0206 	sbc.w	r2, r2, r6
 8003476:	f04f 0300 	mov.w	r3, #0
 800347a:	f04f 0400 	mov.w	r4, #0
 800347e:	0194      	lsls	r4, r2, #6
 8003480:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003484:	018b      	lsls	r3, r1, #6
 8003486:	1a5b      	subs	r3, r3, r1
 8003488:	eb64 0402 	sbc.w	r4, r4, r2
 800348c:	f04f 0100 	mov.w	r1, #0
 8003490:	f04f 0200 	mov.w	r2, #0
 8003494:	00e2      	lsls	r2, r4, #3
 8003496:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800349a:	00d9      	lsls	r1, r3, #3
 800349c:	460b      	mov	r3, r1
 800349e:	4614      	mov	r4, r2
 80034a0:	195b      	adds	r3, r3, r5
 80034a2:	eb44 0406 	adc.w	r4, r4, r6
 80034a6:	f04f 0100 	mov.w	r1, #0
 80034aa:	f04f 0200 	mov.w	r2, #0
 80034ae:	0262      	lsls	r2, r4, #9
 80034b0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80034b4:	0259      	lsls	r1, r3, #9
 80034b6:	460b      	mov	r3, r1
 80034b8:	4614      	mov	r4, r2
 80034ba:	4618      	mov	r0, r3
 80034bc:	4621      	mov	r1, r4
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f04f 0400 	mov.w	r4, #0
 80034c4:	461a      	mov	r2, r3
 80034c6:	4623      	mov	r3, r4
 80034c8:	f7fc fe86 	bl	80001d8 <__aeabi_uldivmod>
 80034cc:	4603      	mov	r3, r0
 80034ce:	460c      	mov	r4, r1
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	e049      	b.n	8003568 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034d4:	4b2f      	ldr	r3, [pc, #188]	; (8003594 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	099b      	lsrs	r3, r3, #6
 80034da:	f04f 0400 	mov.w	r4, #0
 80034de:	f240 11ff 	movw	r1, #511	; 0x1ff
 80034e2:	f04f 0200 	mov.w	r2, #0
 80034e6:	ea03 0501 	and.w	r5, r3, r1
 80034ea:	ea04 0602 	and.w	r6, r4, r2
 80034ee:	4629      	mov	r1, r5
 80034f0:	4632      	mov	r2, r6
 80034f2:	f04f 0300 	mov.w	r3, #0
 80034f6:	f04f 0400 	mov.w	r4, #0
 80034fa:	0154      	lsls	r4, r2, #5
 80034fc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003500:	014b      	lsls	r3, r1, #5
 8003502:	4619      	mov	r1, r3
 8003504:	4622      	mov	r2, r4
 8003506:	1b49      	subs	r1, r1, r5
 8003508:	eb62 0206 	sbc.w	r2, r2, r6
 800350c:	f04f 0300 	mov.w	r3, #0
 8003510:	f04f 0400 	mov.w	r4, #0
 8003514:	0194      	lsls	r4, r2, #6
 8003516:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800351a:	018b      	lsls	r3, r1, #6
 800351c:	1a5b      	subs	r3, r3, r1
 800351e:	eb64 0402 	sbc.w	r4, r4, r2
 8003522:	f04f 0100 	mov.w	r1, #0
 8003526:	f04f 0200 	mov.w	r2, #0
 800352a:	00e2      	lsls	r2, r4, #3
 800352c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003530:	00d9      	lsls	r1, r3, #3
 8003532:	460b      	mov	r3, r1
 8003534:	4614      	mov	r4, r2
 8003536:	195b      	adds	r3, r3, r5
 8003538:	eb44 0406 	adc.w	r4, r4, r6
 800353c:	f04f 0100 	mov.w	r1, #0
 8003540:	f04f 0200 	mov.w	r2, #0
 8003544:	02a2      	lsls	r2, r4, #10
 8003546:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800354a:	0299      	lsls	r1, r3, #10
 800354c:	460b      	mov	r3, r1
 800354e:	4614      	mov	r4, r2
 8003550:	4618      	mov	r0, r3
 8003552:	4621      	mov	r1, r4
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f04f 0400 	mov.w	r4, #0
 800355a:	461a      	mov	r2, r3
 800355c:	4623      	mov	r3, r4
 800355e:	f7fc fe3b 	bl	80001d8 <__aeabi_uldivmod>
 8003562:	4603      	mov	r3, r0
 8003564:	460c      	mov	r4, r1
 8003566:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003568:	4b0a      	ldr	r3, [pc, #40]	; (8003594 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	0c1b      	lsrs	r3, r3, #16
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	3301      	adds	r3, #1
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003580:	60bb      	str	r3, [r7, #8]
      break;
 8003582:	e002      	b.n	800358a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003584:	4b04      	ldr	r3, [pc, #16]	; (8003598 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003586:	60bb      	str	r3, [r7, #8]
      break;
 8003588:	bf00      	nop
    }
  }
  return sysclockfreq;
 800358a:	68bb      	ldr	r3, [r7, #8]
}
 800358c:	4618      	mov	r0, r3
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003594:	40023800 	.word	0x40023800
 8003598:	00f42400 	.word	0x00f42400
 800359c:	007a1200 	.word	0x007a1200

080035a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035a4:	4b03      	ldr	r3, [pc, #12]	; (80035b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80035a6:	681b      	ldr	r3, [r3, #0]
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	20000000 	.word	0x20000000

080035b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035bc:	f7ff fff0 	bl	80035a0 <HAL_RCC_GetHCLKFreq>
 80035c0:	4601      	mov	r1, r0
 80035c2:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	0a9b      	lsrs	r3, r3, #10
 80035c8:	f003 0307 	and.w	r3, r3, #7
 80035cc:	4a03      	ldr	r2, [pc, #12]	; (80035dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80035ce:	5cd3      	ldrb	r3, [r2, r3]
 80035d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40023800 	.word	0x40023800
 80035dc:	08004730 	.word	0x08004730

080035e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035e4:	f7ff ffdc 	bl	80035a0 <HAL_RCC_GetHCLKFreq>
 80035e8:	4601      	mov	r1, r0
 80035ea:	4b05      	ldr	r3, [pc, #20]	; (8003600 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	0b5b      	lsrs	r3, r3, #13
 80035f0:	f003 0307 	and.w	r3, r3, #7
 80035f4:	4a03      	ldr	r2, [pc, #12]	; (8003604 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035f6:	5cd3      	ldrb	r3, [r2, r3]
 80035f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40023800 	.word	0x40023800
 8003604:	08004730 	.word	0x08004730

08003608 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e03f      	b.n	800369a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d106      	bne.n	8003634 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7fe feb2 	bl	8002398 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2224      	movs	r2, #36	; 0x24
 8003638:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800364a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 fa2b 	bl	8003aa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003660:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	695a      	ldr	r2, [r3, #20]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003670:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68da      	ldr	r2, [r3, #12]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003680:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2220      	movs	r2, #32
 800368c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2220      	movs	r2, #32
 8003694:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
	...

080036a4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	4613      	mov	r3, r2
 80036b0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b20      	cmp	r3, #32
 80036bc:	d153      	bne.n	8003766 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d002      	beq.n	80036ca <HAL_UART_Transmit_DMA+0x26>
 80036c4:	88fb      	ldrh	r3, [r7, #6]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e04c      	b.n	8003768 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d101      	bne.n	80036dc <HAL_UART_Transmit_DMA+0x38>
 80036d8:	2302      	movs	r3, #2
 80036da:	e045      	b.n	8003768 <HAL_UART_Transmit_DMA+0xc4>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	88fa      	ldrh	r2, [r7, #6]
 80036ee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	88fa      	ldrh	r2, [r7, #6]
 80036f4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2221      	movs	r2, #33	; 0x21
 8003700:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003708:	4a19      	ldr	r2, [pc, #100]	; (8003770 <HAL_UART_Transmit_DMA+0xcc>)
 800370a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003710:	4a18      	ldr	r2, [pc, #96]	; (8003774 <HAL_UART_Transmit_DMA+0xd0>)
 8003712:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003718:	4a17      	ldr	r2, [pc, #92]	; (8003778 <HAL_UART_Transmit_DMA+0xd4>)
 800371a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003720:	2200      	movs	r2, #0
 8003722:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8003724:	f107 0308 	add.w	r3, r7, #8
 8003728:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	6819      	ldr	r1, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	3304      	adds	r3, #4
 8003738:	461a      	mov	r2, r3
 800373a:	88fb      	ldrh	r3, [r7, #6]
 800373c:	f7ff f8c5 	bl	80028ca <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003748:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695a      	ldr	r2, [r3, #20]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003760:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003762:	2300      	movs	r3, #0
 8003764:	e000      	b.n	8003768 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003766:	2302      	movs	r3, #2
  }
}
 8003768:	4618      	mov	r0, r3
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	080038b9 	.word	0x080038b9
 8003774:	0800390b 	.word	0x0800390b
 8003778:	080039ab 	.word	0x080039ab

0800377c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	4613      	mov	r3, r2
 8003788:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b20      	cmp	r3, #32
 8003794:	d166      	bne.n	8003864 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d002      	beq.n	80037a2 <HAL_UART_Receive_DMA+0x26>
 800379c:	88fb      	ldrh	r3, [r7, #6]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e05f      	b.n	8003866 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d101      	bne.n	80037b4 <HAL_UART_Receive_DMA+0x38>
 80037b0:	2302      	movs	r3, #2
 80037b2:	e058      	b.n	8003866 <HAL_UART_Receive_DMA+0xea>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80037bc:	68ba      	ldr	r2, [r7, #8]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	88fa      	ldrh	r2, [r7, #6]
 80037c6:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2222      	movs	r2, #34	; 0x22
 80037d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037da:	4a25      	ldr	r2, [pc, #148]	; (8003870 <HAL_UART_Receive_DMA+0xf4>)
 80037dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e2:	4a24      	ldr	r2, [pc, #144]	; (8003874 <HAL_UART_Receive_DMA+0xf8>)
 80037e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ea:	4a23      	ldr	r2, [pc, #140]	; (8003878 <HAL_UART_Receive_DMA+0xfc>)
 80037ec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f2:	2200      	movs	r2, #0
 80037f4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80037f6:	f107 0308 	add.w	r3, r7, #8
 80037fa:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	3304      	adds	r3, #4
 8003806:	4619      	mov	r1, r3
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	88fb      	ldrh	r3, [r7, #6]
 800380e:	f7ff f85c 	bl	80028ca <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003812:	2300      	movs	r3, #0
 8003814:	613b      	str	r3, [r7, #16]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	613b      	str	r3, [r7, #16]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	613b      	str	r3, [r7, #16]
 8003826:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68da      	ldr	r2, [r3, #12]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800383e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695a      	ldr	r2, [r3, #20]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 0201 	orr.w	r2, r2, #1
 800384e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695a      	ldr	r2, [r3, #20]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800385e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003860:	2300      	movs	r3, #0
 8003862:	e000      	b.n	8003866 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003864:	2302      	movs	r3, #2
  }
}
 8003866:	4618      	mov	r0, r3
 8003868:	3718      	adds	r7, #24
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	08003927 	.word	0x08003927
 8003874:	0800398f 	.word	0x0800398f
 8003878:	080039ab 	.word	0x080039ab

0800387c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d113      	bne.n	80038fc <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	695a      	ldr	r2, [r3, #20]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038e8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68da      	ldr	r2, [r3, #12]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038f8:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80038fa:	e002      	b.n	8003902 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f7fd feef 	bl	80016e0 <HAL_UART_TxCpltCallback>
}
 8003902:	bf00      	nop
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b084      	sub	sp, #16
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003916:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f7ff ffaf 	bl	800387c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800391e:	bf00      	nop
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b084      	sub	sp, #16
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003932:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393e:	2b00      	cmp	r3, #0
 8003940:	d11e      	bne.n	8003980 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003956:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695a      	ldr	r2, [r3, #20]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 0201 	bic.w	r2, r2, #1
 8003966:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695a      	ldr	r2, [r3, #20]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003976:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f7fd febf 	bl	8001704 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003986:	bf00      	nop
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b084      	sub	sp, #16
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f7ff ff77 	bl	8003890 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039a2:	bf00      	nop
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b084      	sub	sp, #16
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80039b2:	2300      	movs	r3, #0
 80039b4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ba:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c6:	2b80      	cmp	r3, #128	; 0x80
 80039c8:	bf0c      	ite	eq
 80039ca:	2301      	moveq	r3, #1
 80039cc:	2300      	movne	r3, #0
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b21      	cmp	r3, #33	; 0x21
 80039dc:	d108      	bne.n	80039f0 <UART_DMAError+0x46>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d005      	beq.n	80039f0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2200      	movs	r2, #0
 80039e8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80039ea:	68b8      	ldr	r0, [r7, #8]
 80039ec:	f000 f827 	bl	8003a3e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039fa:	2b40      	cmp	r3, #64	; 0x40
 80039fc:	bf0c      	ite	eq
 80039fe:	2301      	moveq	r3, #1
 8003a00:	2300      	movne	r3, #0
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b22      	cmp	r3, #34	; 0x22
 8003a10:	d108      	bne.n	8003a24 <UART_DMAError+0x7a>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d005      	beq.n	8003a24 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003a1e:	68b8      	ldr	r0, [r7, #8]
 8003a20:	f000 f823 	bl	8003a6a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a28:	f043 0210 	orr.w	r2, r3, #16
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a30:	68b8      	ldr	r0, [r7, #8]
 8003a32:	f7ff ff37 	bl	80038a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a36:	bf00      	nop
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b083      	sub	sp, #12
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68da      	ldr	r2, [r3, #12]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003a54:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b083      	sub	sp, #12
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68da      	ldr	r2, [r3, #12]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003a80:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	695a      	ldr	r2, [r3, #20]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 0201 	bic.w	r2, r2, #1
 8003a90:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2220      	movs	r2, #32
 8003a96:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003a9a:	bf00      	nop
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
	...

08003aa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aac:	b085      	sub	sp, #20
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68da      	ldr	r2, [r3, #12]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003aea:	f023 030c 	bic.w	r3, r3, #12
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6812      	ldr	r2, [r2, #0]
 8003af2:	68f9      	ldr	r1, [r7, #12]
 8003af4:	430b      	orrs	r3, r1
 8003af6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	699a      	ldr	r2, [r3, #24]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b16:	f040 818b 	bne.w	8003e30 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4ac1      	ldr	r2, [pc, #772]	; (8003e24 <UART_SetConfig+0x37c>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d005      	beq.n	8003b30 <UART_SetConfig+0x88>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4abf      	ldr	r2, [pc, #764]	; (8003e28 <UART_SetConfig+0x380>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	f040 80bd 	bne.w	8003caa <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b30:	f7ff fd56 	bl	80035e0 <HAL_RCC_GetPCLK2Freq>
 8003b34:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	461d      	mov	r5, r3
 8003b3a:	f04f 0600 	mov.w	r6, #0
 8003b3e:	46a8      	mov	r8, r5
 8003b40:	46b1      	mov	r9, r6
 8003b42:	eb18 0308 	adds.w	r3, r8, r8
 8003b46:	eb49 0409 	adc.w	r4, r9, r9
 8003b4a:	4698      	mov	r8, r3
 8003b4c:	46a1      	mov	r9, r4
 8003b4e:	eb18 0805 	adds.w	r8, r8, r5
 8003b52:	eb49 0906 	adc.w	r9, r9, r6
 8003b56:	f04f 0100 	mov.w	r1, #0
 8003b5a:	f04f 0200 	mov.w	r2, #0
 8003b5e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b62:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b66:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b6a:	4688      	mov	r8, r1
 8003b6c:	4691      	mov	r9, r2
 8003b6e:	eb18 0005 	adds.w	r0, r8, r5
 8003b72:	eb49 0106 	adc.w	r1, r9, r6
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	461d      	mov	r5, r3
 8003b7c:	f04f 0600 	mov.w	r6, #0
 8003b80:	196b      	adds	r3, r5, r5
 8003b82:	eb46 0406 	adc.w	r4, r6, r6
 8003b86:	461a      	mov	r2, r3
 8003b88:	4623      	mov	r3, r4
 8003b8a:	f7fc fb25 	bl	80001d8 <__aeabi_uldivmod>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	460c      	mov	r4, r1
 8003b92:	461a      	mov	r2, r3
 8003b94:	4ba5      	ldr	r3, [pc, #660]	; (8003e2c <UART_SetConfig+0x384>)
 8003b96:	fba3 2302 	umull	r2, r3, r3, r2
 8003b9a:	095b      	lsrs	r3, r3, #5
 8003b9c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	461d      	mov	r5, r3
 8003ba4:	f04f 0600 	mov.w	r6, #0
 8003ba8:	46a9      	mov	r9, r5
 8003baa:	46b2      	mov	sl, r6
 8003bac:	eb19 0309 	adds.w	r3, r9, r9
 8003bb0:	eb4a 040a 	adc.w	r4, sl, sl
 8003bb4:	4699      	mov	r9, r3
 8003bb6:	46a2      	mov	sl, r4
 8003bb8:	eb19 0905 	adds.w	r9, r9, r5
 8003bbc:	eb4a 0a06 	adc.w	sl, sl, r6
 8003bc0:	f04f 0100 	mov.w	r1, #0
 8003bc4:	f04f 0200 	mov.w	r2, #0
 8003bc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bcc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003bd0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003bd4:	4689      	mov	r9, r1
 8003bd6:	4692      	mov	sl, r2
 8003bd8:	eb19 0005 	adds.w	r0, r9, r5
 8003bdc:	eb4a 0106 	adc.w	r1, sl, r6
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	461d      	mov	r5, r3
 8003be6:	f04f 0600 	mov.w	r6, #0
 8003bea:	196b      	adds	r3, r5, r5
 8003bec:	eb46 0406 	adc.w	r4, r6, r6
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	4623      	mov	r3, r4
 8003bf4:	f7fc faf0 	bl	80001d8 <__aeabi_uldivmod>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	460c      	mov	r4, r1
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	4b8b      	ldr	r3, [pc, #556]	; (8003e2c <UART_SetConfig+0x384>)
 8003c00:	fba3 1302 	umull	r1, r3, r3, r2
 8003c04:	095b      	lsrs	r3, r3, #5
 8003c06:	2164      	movs	r1, #100	; 0x64
 8003c08:	fb01 f303 	mul.w	r3, r1, r3
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	3332      	adds	r3, #50	; 0x32
 8003c12:	4a86      	ldr	r2, [pc, #536]	; (8003e2c <UART_SetConfig+0x384>)
 8003c14:	fba2 2303 	umull	r2, r3, r2, r3
 8003c18:	095b      	lsrs	r3, r3, #5
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c20:	4498      	add	r8, r3
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	461d      	mov	r5, r3
 8003c26:	f04f 0600 	mov.w	r6, #0
 8003c2a:	46a9      	mov	r9, r5
 8003c2c:	46b2      	mov	sl, r6
 8003c2e:	eb19 0309 	adds.w	r3, r9, r9
 8003c32:	eb4a 040a 	adc.w	r4, sl, sl
 8003c36:	4699      	mov	r9, r3
 8003c38:	46a2      	mov	sl, r4
 8003c3a:	eb19 0905 	adds.w	r9, r9, r5
 8003c3e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c42:	f04f 0100 	mov.w	r1, #0
 8003c46:	f04f 0200 	mov.w	r2, #0
 8003c4a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c4e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c52:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c56:	4689      	mov	r9, r1
 8003c58:	4692      	mov	sl, r2
 8003c5a:	eb19 0005 	adds.w	r0, r9, r5
 8003c5e:	eb4a 0106 	adc.w	r1, sl, r6
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	461d      	mov	r5, r3
 8003c68:	f04f 0600 	mov.w	r6, #0
 8003c6c:	196b      	adds	r3, r5, r5
 8003c6e:	eb46 0406 	adc.w	r4, r6, r6
 8003c72:	461a      	mov	r2, r3
 8003c74:	4623      	mov	r3, r4
 8003c76:	f7fc faaf 	bl	80001d8 <__aeabi_uldivmod>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	460c      	mov	r4, r1
 8003c7e:	461a      	mov	r2, r3
 8003c80:	4b6a      	ldr	r3, [pc, #424]	; (8003e2c <UART_SetConfig+0x384>)
 8003c82:	fba3 1302 	umull	r1, r3, r3, r2
 8003c86:	095b      	lsrs	r3, r3, #5
 8003c88:	2164      	movs	r1, #100	; 0x64
 8003c8a:	fb01 f303 	mul.w	r3, r1, r3
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	3332      	adds	r3, #50	; 0x32
 8003c94:	4a65      	ldr	r2, [pc, #404]	; (8003e2c <UART_SetConfig+0x384>)
 8003c96:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9a:	095b      	lsrs	r3, r3, #5
 8003c9c:	f003 0207 	and.w	r2, r3, #7
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4442      	add	r2, r8
 8003ca6:	609a      	str	r2, [r3, #8]
 8003ca8:	e26f      	b.n	800418a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003caa:	f7ff fc85 	bl	80035b8 <HAL_RCC_GetPCLK1Freq>
 8003cae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	461d      	mov	r5, r3
 8003cb4:	f04f 0600 	mov.w	r6, #0
 8003cb8:	46a8      	mov	r8, r5
 8003cba:	46b1      	mov	r9, r6
 8003cbc:	eb18 0308 	adds.w	r3, r8, r8
 8003cc0:	eb49 0409 	adc.w	r4, r9, r9
 8003cc4:	4698      	mov	r8, r3
 8003cc6:	46a1      	mov	r9, r4
 8003cc8:	eb18 0805 	adds.w	r8, r8, r5
 8003ccc:	eb49 0906 	adc.w	r9, r9, r6
 8003cd0:	f04f 0100 	mov.w	r1, #0
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003cdc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ce0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ce4:	4688      	mov	r8, r1
 8003ce6:	4691      	mov	r9, r2
 8003ce8:	eb18 0005 	adds.w	r0, r8, r5
 8003cec:	eb49 0106 	adc.w	r1, r9, r6
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	461d      	mov	r5, r3
 8003cf6:	f04f 0600 	mov.w	r6, #0
 8003cfa:	196b      	adds	r3, r5, r5
 8003cfc:	eb46 0406 	adc.w	r4, r6, r6
 8003d00:	461a      	mov	r2, r3
 8003d02:	4623      	mov	r3, r4
 8003d04:	f7fc fa68 	bl	80001d8 <__aeabi_uldivmod>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	460c      	mov	r4, r1
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4b47      	ldr	r3, [pc, #284]	; (8003e2c <UART_SetConfig+0x384>)
 8003d10:	fba3 2302 	umull	r2, r3, r3, r2
 8003d14:	095b      	lsrs	r3, r3, #5
 8003d16:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	461d      	mov	r5, r3
 8003d1e:	f04f 0600 	mov.w	r6, #0
 8003d22:	46a9      	mov	r9, r5
 8003d24:	46b2      	mov	sl, r6
 8003d26:	eb19 0309 	adds.w	r3, r9, r9
 8003d2a:	eb4a 040a 	adc.w	r4, sl, sl
 8003d2e:	4699      	mov	r9, r3
 8003d30:	46a2      	mov	sl, r4
 8003d32:	eb19 0905 	adds.w	r9, r9, r5
 8003d36:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d3a:	f04f 0100 	mov.w	r1, #0
 8003d3e:	f04f 0200 	mov.w	r2, #0
 8003d42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d46:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d4a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d4e:	4689      	mov	r9, r1
 8003d50:	4692      	mov	sl, r2
 8003d52:	eb19 0005 	adds.w	r0, r9, r5
 8003d56:	eb4a 0106 	adc.w	r1, sl, r6
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	461d      	mov	r5, r3
 8003d60:	f04f 0600 	mov.w	r6, #0
 8003d64:	196b      	adds	r3, r5, r5
 8003d66:	eb46 0406 	adc.w	r4, r6, r6
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	4623      	mov	r3, r4
 8003d6e:	f7fc fa33 	bl	80001d8 <__aeabi_uldivmod>
 8003d72:	4603      	mov	r3, r0
 8003d74:	460c      	mov	r4, r1
 8003d76:	461a      	mov	r2, r3
 8003d78:	4b2c      	ldr	r3, [pc, #176]	; (8003e2c <UART_SetConfig+0x384>)
 8003d7a:	fba3 1302 	umull	r1, r3, r3, r2
 8003d7e:	095b      	lsrs	r3, r3, #5
 8003d80:	2164      	movs	r1, #100	; 0x64
 8003d82:	fb01 f303 	mul.w	r3, r1, r3
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	3332      	adds	r3, #50	; 0x32
 8003d8c:	4a27      	ldr	r2, [pc, #156]	; (8003e2c <UART_SetConfig+0x384>)
 8003d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d92:	095b      	lsrs	r3, r3, #5
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d9a:	4498      	add	r8, r3
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	461d      	mov	r5, r3
 8003da0:	f04f 0600 	mov.w	r6, #0
 8003da4:	46a9      	mov	r9, r5
 8003da6:	46b2      	mov	sl, r6
 8003da8:	eb19 0309 	adds.w	r3, r9, r9
 8003dac:	eb4a 040a 	adc.w	r4, sl, sl
 8003db0:	4699      	mov	r9, r3
 8003db2:	46a2      	mov	sl, r4
 8003db4:	eb19 0905 	adds.w	r9, r9, r5
 8003db8:	eb4a 0a06 	adc.w	sl, sl, r6
 8003dbc:	f04f 0100 	mov.w	r1, #0
 8003dc0:	f04f 0200 	mov.w	r2, #0
 8003dc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dc8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003dcc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003dd0:	4689      	mov	r9, r1
 8003dd2:	4692      	mov	sl, r2
 8003dd4:	eb19 0005 	adds.w	r0, r9, r5
 8003dd8:	eb4a 0106 	adc.w	r1, sl, r6
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	461d      	mov	r5, r3
 8003de2:	f04f 0600 	mov.w	r6, #0
 8003de6:	196b      	adds	r3, r5, r5
 8003de8:	eb46 0406 	adc.w	r4, r6, r6
 8003dec:	461a      	mov	r2, r3
 8003dee:	4623      	mov	r3, r4
 8003df0:	f7fc f9f2 	bl	80001d8 <__aeabi_uldivmod>
 8003df4:	4603      	mov	r3, r0
 8003df6:	460c      	mov	r4, r1
 8003df8:	461a      	mov	r2, r3
 8003dfa:	4b0c      	ldr	r3, [pc, #48]	; (8003e2c <UART_SetConfig+0x384>)
 8003dfc:	fba3 1302 	umull	r1, r3, r3, r2
 8003e00:	095b      	lsrs	r3, r3, #5
 8003e02:	2164      	movs	r1, #100	; 0x64
 8003e04:	fb01 f303 	mul.w	r3, r1, r3
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	3332      	adds	r3, #50	; 0x32
 8003e0e:	4a07      	ldr	r2, [pc, #28]	; (8003e2c <UART_SetConfig+0x384>)
 8003e10:	fba2 2303 	umull	r2, r3, r2, r3
 8003e14:	095b      	lsrs	r3, r3, #5
 8003e16:	f003 0207 	and.w	r2, r3, #7
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4442      	add	r2, r8
 8003e20:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003e22:	e1b2      	b.n	800418a <UART_SetConfig+0x6e2>
 8003e24:	40011000 	.word	0x40011000
 8003e28:	40011400 	.word	0x40011400
 8003e2c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4ad7      	ldr	r2, [pc, #860]	; (8004194 <UART_SetConfig+0x6ec>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d005      	beq.n	8003e46 <UART_SetConfig+0x39e>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4ad6      	ldr	r2, [pc, #856]	; (8004198 <UART_SetConfig+0x6f0>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	f040 80d1 	bne.w	8003fe8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e46:	f7ff fbcb 	bl	80035e0 <HAL_RCC_GetPCLK2Freq>
 8003e4a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	469a      	mov	sl, r3
 8003e50:	f04f 0b00 	mov.w	fp, #0
 8003e54:	46d0      	mov	r8, sl
 8003e56:	46d9      	mov	r9, fp
 8003e58:	eb18 0308 	adds.w	r3, r8, r8
 8003e5c:	eb49 0409 	adc.w	r4, r9, r9
 8003e60:	4698      	mov	r8, r3
 8003e62:	46a1      	mov	r9, r4
 8003e64:	eb18 080a 	adds.w	r8, r8, sl
 8003e68:	eb49 090b 	adc.w	r9, r9, fp
 8003e6c:	f04f 0100 	mov.w	r1, #0
 8003e70:	f04f 0200 	mov.w	r2, #0
 8003e74:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e78:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e7c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e80:	4688      	mov	r8, r1
 8003e82:	4691      	mov	r9, r2
 8003e84:	eb1a 0508 	adds.w	r5, sl, r8
 8003e88:	eb4b 0609 	adc.w	r6, fp, r9
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	4619      	mov	r1, r3
 8003e92:	f04f 0200 	mov.w	r2, #0
 8003e96:	f04f 0300 	mov.w	r3, #0
 8003e9a:	f04f 0400 	mov.w	r4, #0
 8003e9e:	0094      	lsls	r4, r2, #2
 8003ea0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ea4:	008b      	lsls	r3, r1, #2
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	4623      	mov	r3, r4
 8003eaa:	4628      	mov	r0, r5
 8003eac:	4631      	mov	r1, r6
 8003eae:	f7fc f993 	bl	80001d8 <__aeabi_uldivmod>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	460c      	mov	r4, r1
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	4bb8      	ldr	r3, [pc, #736]	; (800419c <UART_SetConfig+0x6f4>)
 8003eba:	fba3 2302 	umull	r2, r3, r3, r2
 8003ebe:	095b      	lsrs	r3, r3, #5
 8003ec0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	469b      	mov	fp, r3
 8003ec8:	f04f 0c00 	mov.w	ip, #0
 8003ecc:	46d9      	mov	r9, fp
 8003ece:	46e2      	mov	sl, ip
 8003ed0:	eb19 0309 	adds.w	r3, r9, r9
 8003ed4:	eb4a 040a 	adc.w	r4, sl, sl
 8003ed8:	4699      	mov	r9, r3
 8003eda:	46a2      	mov	sl, r4
 8003edc:	eb19 090b 	adds.w	r9, r9, fp
 8003ee0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003ee4:	f04f 0100 	mov.w	r1, #0
 8003ee8:	f04f 0200 	mov.w	r2, #0
 8003eec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ef0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ef4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ef8:	4689      	mov	r9, r1
 8003efa:	4692      	mov	sl, r2
 8003efc:	eb1b 0509 	adds.w	r5, fp, r9
 8003f00:	eb4c 060a 	adc.w	r6, ip, sl
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	4619      	mov	r1, r3
 8003f0a:	f04f 0200 	mov.w	r2, #0
 8003f0e:	f04f 0300 	mov.w	r3, #0
 8003f12:	f04f 0400 	mov.w	r4, #0
 8003f16:	0094      	lsls	r4, r2, #2
 8003f18:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f1c:	008b      	lsls	r3, r1, #2
 8003f1e:	461a      	mov	r2, r3
 8003f20:	4623      	mov	r3, r4
 8003f22:	4628      	mov	r0, r5
 8003f24:	4631      	mov	r1, r6
 8003f26:	f7fc f957 	bl	80001d8 <__aeabi_uldivmod>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	460c      	mov	r4, r1
 8003f2e:	461a      	mov	r2, r3
 8003f30:	4b9a      	ldr	r3, [pc, #616]	; (800419c <UART_SetConfig+0x6f4>)
 8003f32:	fba3 1302 	umull	r1, r3, r3, r2
 8003f36:	095b      	lsrs	r3, r3, #5
 8003f38:	2164      	movs	r1, #100	; 0x64
 8003f3a:	fb01 f303 	mul.w	r3, r1, r3
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	011b      	lsls	r3, r3, #4
 8003f42:	3332      	adds	r3, #50	; 0x32
 8003f44:	4a95      	ldr	r2, [pc, #596]	; (800419c <UART_SetConfig+0x6f4>)
 8003f46:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4a:	095b      	lsrs	r3, r3, #5
 8003f4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f50:	4498      	add	r8, r3
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	469b      	mov	fp, r3
 8003f56:	f04f 0c00 	mov.w	ip, #0
 8003f5a:	46d9      	mov	r9, fp
 8003f5c:	46e2      	mov	sl, ip
 8003f5e:	eb19 0309 	adds.w	r3, r9, r9
 8003f62:	eb4a 040a 	adc.w	r4, sl, sl
 8003f66:	4699      	mov	r9, r3
 8003f68:	46a2      	mov	sl, r4
 8003f6a:	eb19 090b 	adds.w	r9, r9, fp
 8003f6e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f72:	f04f 0100 	mov.w	r1, #0
 8003f76:	f04f 0200 	mov.w	r2, #0
 8003f7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f7e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f82:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f86:	4689      	mov	r9, r1
 8003f88:	4692      	mov	sl, r2
 8003f8a:	eb1b 0509 	adds.w	r5, fp, r9
 8003f8e:	eb4c 060a 	adc.w	r6, ip, sl
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	4619      	mov	r1, r3
 8003f98:	f04f 0200 	mov.w	r2, #0
 8003f9c:	f04f 0300 	mov.w	r3, #0
 8003fa0:	f04f 0400 	mov.w	r4, #0
 8003fa4:	0094      	lsls	r4, r2, #2
 8003fa6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003faa:	008b      	lsls	r3, r1, #2
 8003fac:	461a      	mov	r2, r3
 8003fae:	4623      	mov	r3, r4
 8003fb0:	4628      	mov	r0, r5
 8003fb2:	4631      	mov	r1, r6
 8003fb4:	f7fc f910 	bl	80001d8 <__aeabi_uldivmod>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	460c      	mov	r4, r1
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	4b77      	ldr	r3, [pc, #476]	; (800419c <UART_SetConfig+0x6f4>)
 8003fc0:	fba3 1302 	umull	r1, r3, r3, r2
 8003fc4:	095b      	lsrs	r3, r3, #5
 8003fc6:	2164      	movs	r1, #100	; 0x64
 8003fc8:	fb01 f303 	mul.w	r3, r1, r3
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	011b      	lsls	r3, r3, #4
 8003fd0:	3332      	adds	r3, #50	; 0x32
 8003fd2:	4a72      	ldr	r2, [pc, #456]	; (800419c <UART_SetConfig+0x6f4>)
 8003fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd8:	095b      	lsrs	r3, r3, #5
 8003fda:	f003 020f 	and.w	r2, r3, #15
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4442      	add	r2, r8
 8003fe4:	609a      	str	r2, [r3, #8]
 8003fe6:	e0d0      	b.n	800418a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fe8:	f7ff fae6 	bl	80035b8 <HAL_RCC_GetPCLK1Freq>
 8003fec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	469a      	mov	sl, r3
 8003ff2:	f04f 0b00 	mov.w	fp, #0
 8003ff6:	46d0      	mov	r8, sl
 8003ff8:	46d9      	mov	r9, fp
 8003ffa:	eb18 0308 	adds.w	r3, r8, r8
 8003ffe:	eb49 0409 	adc.w	r4, r9, r9
 8004002:	4698      	mov	r8, r3
 8004004:	46a1      	mov	r9, r4
 8004006:	eb18 080a 	adds.w	r8, r8, sl
 800400a:	eb49 090b 	adc.w	r9, r9, fp
 800400e:	f04f 0100 	mov.w	r1, #0
 8004012:	f04f 0200 	mov.w	r2, #0
 8004016:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800401a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800401e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004022:	4688      	mov	r8, r1
 8004024:	4691      	mov	r9, r2
 8004026:	eb1a 0508 	adds.w	r5, sl, r8
 800402a:	eb4b 0609 	adc.w	r6, fp, r9
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	4619      	mov	r1, r3
 8004034:	f04f 0200 	mov.w	r2, #0
 8004038:	f04f 0300 	mov.w	r3, #0
 800403c:	f04f 0400 	mov.w	r4, #0
 8004040:	0094      	lsls	r4, r2, #2
 8004042:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004046:	008b      	lsls	r3, r1, #2
 8004048:	461a      	mov	r2, r3
 800404a:	4623      	mov	r3, r4
 800404c:	4628      	mov	r0, r5
 800404e:	4631      	mov	r1, r6
 8004050:	f7fc f8c2 	bl	80001d8 <__aeabi_uldivmod>
 8004054:	4603      	mov	r3, r0
 8004056:	460c      	mov	r4, r1
 8004058:	461a      	mov	r2, r3
 800405a:	4b50      	ldr	r3, [pc, #320]	; (800419c <UART_SetConfig+0x6f4>)
 800405c:	fba3 2302 	umull	r2, r3, r3, r2
 8004060:	095b      	lsrs	r3, r3, #5
 8004062:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	469b      	mov	fp, r3
 800406a:	f04f 0c00 	mov.w	ip, #0
 800406e:	46d9      	mov	r9, fp
 8004070:	46e2      	mov	sl, ip
 8004072:	eb19 0309 	adds.w	r3, r9, r9
 8004076:	eb4a 040a 	adc.w	r4, sl, sl
 800407a:	4699      	mov	r9, r3
 800407c:	46a2      	mov	sl, r4
 800407e:	eb19 090b 	adds.w	r9, r9, fp
 8004082:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004086:	f04f 0100 	mov.w	r1, #0
 800408a:	f04f 0200 	mov.w	r2, #0
 800408e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004092:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004096:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800409a:	4689      	mov	r9, r1
 800409c:	4692      	mov	sl, r2
 800409e:	eb1b 0509 	adds.w	r5, fp, r9
 80040a2:	eb4c 060a 	adc.w	r6, ip, sl
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	4619      	mov	r1, r3
 80040ac:	f04f 0200 	mov.w	r2, #0
 80040b0:	f04f 0300 	mov.w	r3, #0
 80040b4:	f04f 0400 	mov.w	r4, #0
 80040b8:	0094      	lsls	r4, r2, #2
 80040ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040be:	008b      	lsls	r3, r1, #2
 80040c0:	461a      	mov	r2, r3
 80040c2:	4623      	mov	r3, r4
 80040c4:	4628      	mov	r0, r5
 80040c6:	4631      	mov	r1, r6
 80040c8:	f7fc f886 	bl	80001d8 <__aeabi_uldivmod>
 80040cc:	4603      	mov	r3, r0
 80040ce:	460c      	mov	r4, r1
 80040d0:	461a      	mov	r2, r3
 80040d2:	4b32      	ldr	r3, [pc, #200]	; (800419c <UART_SetConfig+0x6f4>)
 80040d4:	fba3 1302 	umull	r1, r3, r3, r2
 80040d8:	095b      	lsrs	r3, r3, #5
 80040da:	2164      	movs	r1, #100	; 0x64
 80040dc:	fb01 f303 	mul.w	r3, r1, r3
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	011b      	lsls	r3, r3, #4
 80040e4:	3332      	adds	r3, #50	; 0x32
 80040e6:	4a2d      	ldr	r2, [pc, #180]	; (800419c <UART_SetConfig+0x6f4>)
 80040e8:	fba2 2303 	umull	r2, r3, r2, r3
 80040ec:	095b      	lsrs	r3, r3, #5
 80040ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040f2:	4498      	add	r8, r3
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	469b      	mov	fp, r3
 80040f8:	f04f 0c00 	mov.w	ip, #0
 80040fc:	46d9      	mov	r9, fp
 80040fe:	46e2      	mov	sl, ip
 8004100:	eb19 0309 	adds.w	r3, r9, r9
 8004104:	eb4a 040a 	adc.w	r4, sl, sl
 8004108:	4699      	mov	r9, r3
 800410a:	46a2      	mov	sl, r4
 800410c:	eb19 090b 	adds.w	r9, r9, fp
 8004110:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004114:	f04f 0100 	mov.w	r1, #0
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004120:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004124:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004128:	4689      	mov	r9, r1
 800412a:	4692      	mov	sl, r2
 800412c:	eb1b 0509 	adds.w	r5, fp, r9
 8004130:	eb4c 060a 	adc.w	r6, ip, sl
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	4619      	mov	r1, r3
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	f04f 0300 	mov.w	r3, #0
 8004142:	f04f 0400 	mov.w	r4, #0
 8004146:	0094      	lsls	r4, r2, #2
 8004148:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800414c:	008b      	lsls	r3, r1, #2
 800414e:	461a      	mov	r2, r3
 8004150:	4623      	mov	r3, r4
 8004152:	4628      	mov	r0, r5
 8004154:	4631      	mov	r1, r6
 8004156:	f7fc f83f 	bl	80001d8 <__aeabi_uldivmod>
 800415a:	4603      	mov	r3, r0
 800415c:	460c      	mov	r4, r1
 800415e:	461a      	mov	r2, r3
 8004160:	4b0e      	ldr	r3, [pc, #56]	; (800419c <UART_SetConfig+0x6f4>)
 8004162:	fba3 1302 	umull	r1, r3, r3, r2
 8004166:	095b      	lsrs	r3, r3, #5
 8004168:	2164      	movs	r1, #100	; 0x64
 800416a:	fb01 f303 	mul.w	r3, r1, r3
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	3332      	adds	r3, #50	; 0x32
 8004174:	4a09      	ldr	r2, [pc, #36]	; (800419c <UART_SetConfig+0x6f4>)
 8004176:	fba2 2303 	umull	r2, r3, r2, r3
 800417a:	095b      	lsrs	r3, r3, #5
 800417c:	f003 020f 	and.w	r2, r3, #15
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4442      	add	r2, r8
 8004186:	609a      	str	r2, [r3, #8]
}
 8004188:	e7ff      	b.n	800418a <UART_SetConfig+0x6e2>
 800418a:	bf00      	nop
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004194:	40011000 	.word	0x40011000
 8004198:	40011400 	.word	0x40011400
 800419c:	51eb851f 	.word	0x51eb851f

080041a0 <__cxa_pure_virtual>:
 80041a0:	b508      	push	{r3, lr}
 80041a2:	f000 f80d 	bl	80041c0 <_ZSt9terminatev>

080041a6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80041a6:	b508      	push	{r3, lr}
 80041a8:	4780      	blx	r0
 80041aa:	f000 f80e 	bl	80041ca <abort>
	...

080041b0 <_ZSt13get_terminatev>:
 80041b0:	4b02      	ldr	r3, [pc, #8]	; (80041bc <_ZSt13get_terminatev+0xc>)
 80041b2:	6818      	ldr	r0, [r3, #0]
 80041b4:	f3bf 8f5b 	dmb	ish
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	2000000c 	.word	0x2000000c

080041c0 <_ZSt9terminatev>:
 80041c0:	b508      	push	{r3, lr}
 80041c2:	f7ff fff5 	bl	80041b0 <_ZSt13get_terminatev>
 80041c6:	f7ff ffee 	bl	80041a6 <_ZN10__cxxabiv111__terminateEPFvvE>

080041ca <abort>:
 80041ca:	b508      	push	{r3, lr}
 80041cc:	2006      	movs	r0, #6
 80041ce:	f000 f871 	bl	80042b4 <raise>
 80041d2:	2001      	movs	r0, #1
 80041d4:	f7fe f9a2 	bl	800251c <_exit>

080041d8 <__errno>:
 80041d8:	4b01      	ldr	r3, [pc, #4]	; (80041e0 <__errno+0x8>)
 80041da:	6818      	ldr	r0, [r3, #0]
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	20000010 	.word	0x20000010

080041e4 <__libc_init_array>:
 80041e4:	b570      	push	{r4, r5, r6, lr}
 80041e6:	4e0d      	ldr	r6, [pc, #52]	; (800421c <__libc_init_array+0x38>)
 80041e8:	4c0d      	ldr	r4, [pc, #52]	; (8004220 <__libc_init_array+0x3c>)
 80041ea:	1ba4      	subs	r4, r4, r6
 80041ec:	10a4      	asrs	r4, r4, #2
 80041ee:	2500      	movs	r5, #0
 80041f0:	42a5      	cmp	r5, r4
 80041f2:	d109      	bne.n	8004208 <__libc_init_array+0x24>
 80041f4:	4e0b      	ldr	r6, [pc, #44]	; (8004224 <__libc_init_array+0x40>)
 80041f6:	4c0c      	ldr	r4, [pc, #48]	; (8004228 <__libc_init_array+0x44>)
 80041f8:	f000 f960 	bl	80044bc <_init>
 80041fc:	1ba4      	subs	r4, r4, r6
 80041fe:	10a4      	asrs	r4, r4, #2
 8004200:	2500      	movs	r5, #0
 8004202:	42a5      	cmp	r5, r4
 8004204:	d105      	bne.n	8004212 <__libc_init_array+0x2e>
 8004206:	bd70      	pop	{r4, r5, r6, pc}
 8004208:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800420c:	4798      	blx	r3
 800420e:	3501      	adds	r5, #1
 8004210:	e7ee      	b.n	80041f0 <__libc_init_array+0xc>
 8004212:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004216:	4798      	blx	r3
 8004218:	3501      	adds	r5, #1
 800421a:	e7f2      	b.n	8004202 <__libc_init_array+0x1e>
 800421c:	08004740 	.word	0x08004740
 8004220:	08004740 	.word	0x08004740
 8004224:	08004740 	.word	0x08004740
 8004228:	08004748 	.word	0x08004748

0800422c <memcpy>:
 800422c:	b510      	push	{r4, lr}
 800422e:	1e43      	subs	r3, r0, #1
 8004230:	440a      	add	r2, r1
 8004232:	4291      	cmp	r1, r2
 8004234:	d100      	bne.n	8004238 <memcpy+0xc>
 8004236:	bd10      	pop	{r4, pc}
 8004238:	f811 4b01 	ldrb.w	r4, [r1], #1
 800423c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004240:	e7f7      	b.n	8004232 <memcpy+0x6>

08004242 <memset>:
 8004242:	4402      	add	r2, r0
 8004244:	4603      	mov	r3, r0
 8004246:	4293      	cmp	r3, r2
 8004248:	d100      	bne.n	800424c <memset+0xa>
 800424a:	4770      	bx	lr
 800424c:	f803 1b01 	strb.w	r1, [r3], #1
 8004250:	e7f9      	b.n	8004246 <memset+0x4>
	...

08004254 <realloc>:
 8004254:	4b02      	ldr	r3, [pc, #8]	; (8004260 <realloc+0xc>)
 8004256:	460a      	mov	r2, r1
 8004258:	4601      	mov	r1, r0
 800425a:	6818      	ldr	r0, [r3, #0]
 800425c:	f000 b8a0 	b.w	80043a0 <_realloc_r>
 8004260:	20000010 	.word	0x20000010

08004264 <_raise_r>:
 8004264:	291f      	cmp	r1, #31
 8004266:	b538      	push	{r3, r4, r5, lr}
 8004268:	4604      	mov	r4, r0
 800426a:	460d      	mov	r5, r1
 800426c:	d904      	bls.n	8004278 <_raise_r+0x14>
 800426e:	2316      	movs	r3, #22
 8004270:	6003      	str	r3, [r0, #0]
 8004272:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004276:	bd38      	pop	{r3, r4, r5, pc}
 8004278:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800427a:	b112      	cbz	r2, 8004282 <_raise_r+0x1e>
 800427c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004280:	b94b      	cbnz	r3, 8004296 <_raise_r+0x32>
 8004282:	4620      	mov	r0, r4
 8004284:	f000 f830 	bl	80042e8 <_getpid_r>
 8004288:	462a      	mov	r2, r5
 800428a:	4601      	mov	r1, r0
 800428c:	4620      	mov	r0, r4
 800428e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004292:	f000 b817 	b.w	80042c4 <_kill_r>
 8004296:	2b01      	cmp	r3, #1
 8004298:	d00a      	beq.n	80042b0 <_raise_r+0x4c>
 800429a:	1c59      	adds	r1, r3, #1
 800429c:	d103      	bne.n	80042a6 <_raise_r+0x42>
 800429e:	2316      	movs	r3, #22
 80042a0:	6003      	str	r3, [r0, #0]
 80042a2:	2001      	movs	r0, #1
 80042a4:	e7e7      	b.n	8004276 <_raise_r+0x12>
 80042a6:	2400      	movs	r4, #0
 80042a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80042ac:	4628      	mov	r0, r5
 80042ae:	4798      	blx	r3
 80042b0:	2000      	movs	r0, #0
 80042b2:	e7e0      	b.n	8004276 <_raise_r+0x12>

080042b4 <raise>:
 80042b4:	4b02      	ldr	r3, [pc, #8]	; (80042c0 <raise+0xc>)
 80042b6:	4601      	mov	r1, r0
 80042b8:	6818      	ldr	r0, [r3, #0]
 80042ba:	f7ff bfd3 	b.w	8004264 <_raise_r>
 80042be:	bf00      	nop
 80042c0:	20000010 	.word	0x20000010

080042c4 <_kill_r>:
 80042c4:	b538      	push	{r3, r4, r5, lr}
 80042c6:	4c07      	ldr	r4, [pc, #28]	; (80042e4 <_kill_r+0x20>)
 80042c8:	2300      	movs	r3, #0
 80042ca:	4605      	mov	r5, r0
 80042cc:	4608      	mov	r0, r1
 80042ce:	4611      	mov	r1, r2
 80042d0:	6023      	str	r3, [r4, #0]
 80042d2:	f7fe f913 	bl	80024fc <_kill>
 80042d6:	1c43      	adds	r3, r0, #1
 80042d8:	d102      	bne.n	80042e0 <_kill_r+0x1c>
 80042da:	6823      	ldr	r3, [r4, #0]
 80042dc:	b103      	cbz	r3, 80042e0 <_kill_r+0x1c>
 80042de:	602b      	str	r3, [r5, #0]
 80042e0:	bd38      	pop	{r3, r4, r5, pc}
 80042e2:	bf00      	nop
 80042e4:	20000a7c 	.word	0x20000a7c

080042e8 <_getpid_r>:
 80042e8:	f7fe b900 	b.w	80024ec <_getpid>

080042ec <_malloc_r>:
 80042ec:	b570      	push	{r4, r5, r6, lr}
 80042ee:	1ccd      	adds	r5, r1, #3
 80042f0:	f025 0503 	bic.w	r5, r5, #3
 80042f4:	3508      	adds	r5, #8
 80042f6:	2d0c      	cmp	r5, #12
 80042f8:	bf38      	it	cc
 80042fa:	250c      	movcc	r5, #12
 80042fc:	2d00      	cmp	r5, #0
 80042fe:	4606      	mov	r6, r0
 8004300:	db01      	blt.n	8004306 <_malloc_r+0x1a>
 8004302:	42a9      	cmp	r1, r5
 8004304:	d903      	bls.n	800430e <_malloc_r+0x22>
 8004306:	230c      	movs	r3, #12
 8004308:	6033      	str	r3, [r6, #0]
 800430a:	2000      	movs	r0, #0
 800430c:	bd70      	pop	{r4, r5, r6, pc}
 800430e:	f000 f87d 	bl	800440c <__malloc_lock>
 8004312:	4a21      	ldr	r2, [pc, #132]	; (8004398 <_malloc_r+0xac>)
 8004314:	6814      	ldr	r4, [r2, #0]
 8004316:	4621      	mov	r1, r4
 8004318:	b991      	cbnz	r1, 8004340 <_malloc_r+0x54>
 800431a:	4c20      	ldr	r4, [pc, #128]	; (800439c <_malloc_r+0xb0>)
 800431c:	6823      	ldr	r3, [r4, #0]
 800431e:	b91b      	cbnz	r3, 8004328 <_malloc_r+0x3c>
 8004320:	4630      	mov	r0, r6
 8004322:	f000 f863 	bl	80043ec <_sbrk_r>
 8004326:	6020      	str	r0, [r4, #0]
 8004328:	4629      	mov	r1, r5
 800432a:	4630      	mov	r0, r6
 800432c:	f000 f85e 	bl	80043ec <_sbrk_r>
 8004330:	1c43      	adds	r3, r0, #1
 8004332:	d124      	bne.n	800437e <_malloc_r+0x92>
 8004334:	230c      	movs	r3, #12
 8004336:	6033      	str	r3, [r6, #0]
 8004338:	4630      	mov	r0, r6
 800433a:	f000 f868 	bl	800440e <__malloc_unlock>
 800433e:	e7e4      	b.n	800430a <_malloc_r+0x1e>
 8004340:	680b      	ldr	r3, [r1, #0]
 8004342:	1b5b      	subs	r3, r3, r5
 8004344:	d418      	bmi.n	8004378 <_malloc_r+0x8c>
 8004346:	2b0b      	cmp	r3, #11
 8004348:	d90f      	bls.n	800436a <_malloc_r+0x7e>
 800434a:	600b      	str	r3, [r1, #0]
 800434c:	50cd      	str	r5, [r1, r3]
 800434e:	18cc      	adds	r4, r1, r3
 8004350:	4630      	mov	r0, r6
 8004352:	f000 f85c 	bl	800440e <__malloc_unlock>
 8004356:	f104 000b 	add.w	r0, r4, #11
 800435a:	1d23      	adds	r3, r4, #4
 800435c:	f020 0007 	bic.w	r0, r0, #7
 8004360:	1ac3      	subs	r3, r0, r3
 8004362:	d0d3      	beq.n	800430c <_malloc_r+0x20>
 8004364:	425a      	negs	r2, r3
 8004366:	50e2      	str	r2, [r4, r3]
 8004368:	e7d0      	b.n	800430c <_malloc_r+0x20>
 800436a:	428c      	cmp	r4, r1
 800436c:	684b      	ldr	r3, [r1, #4]
 800436e:	bf16      	itet	ne
 8004370:	6063      	strne	r3, [r4, #4]
 8004372:	6013      	streq	r3, [r2, #0]
 8004374:	460c      	movne	r4, r1
 8004376:	e7eb      	b.n	8004350 <_malloc_r+0x64>
 8004378:	460c      	mov	r4, r1
 800437a:	6849      	ldr	r1, [r1, #4]
 800437c:	e7cc      	b.n	8004318 <_malloc_r+0x2c>
 800437e:	1cc4      	adds	r4, r0, #3
 8004380:	f024 0403 	bic.w	r4, r4, #3
 8004384:	42a0      	cmp	r0, r4
 8004386:	d005      	beq.n	8004394 <_malloc_r+0xa8>
 8004388:	1a21      	subs	r1, r4, r0
 800438a:	4630      	mov	r0, r6
 800438c:	f000 f82e 	bl	80043ec <_sbrk_r>
 8004390:	3001      	adds	r0, #1
 8004392:	d0cf      	beq.n	8004334 <_malloc_r+0x48>
 8004394:	6025      	str	r5, [r4, #0]
 8004396:	e7db      	b.n	8004350 <_malloc_r+0x64>
 8004398:	200009f0 	.word	0x200009f0
 800439c:	200009f4 	.word	0x200009f4

080043a0 <_realloc_r>:
 80043a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a2:	4607      	mov	r7, r0
 80043a4:	4614      	mov	r4, r2
 80043a6:	460e      	mov	r6, r1
 80043a8:	b921      	cbnz	r1, 80043b4 <_realloc_r+0x14>
 80043aa:	4611      	mov	r1, r2
 80043ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80043b0:	f7ff bf9c 	b.w	80042ec <_malloc_r>
 80043b4:	b922      	cbnz	r2, 80043c0 <_realloc_r+0x20>
 80043b6:	f000 f82b 	bl	8004410 <_free_r>
 80043ba:	4625      	mov	r5, r4
 80043bc:	4628      	mov	r0, r5
 80043be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043c0:	f000 f874 	bl	80044ac <_malloc_usable_size_r>
 80043c4:	42a0      	cmp	r0, r4
 80043c6:	d20f      	bcs.n	80043e8 <_realloc_r+0x48>
 80043c8:	4621      	mov	r1, r4
 80043ca:	4638      	mov	r0, r7
 80043cc:	f7ff ff8e 	bl	80042ec <_malloc_r>
 80043d0:	4605      	mov	r5, r0
 80043d2:	2800      	cmp	r0, #0
 80043d4:	d0f2      	beq.n	80043bc <_realloc_r+0x1c>
 80043d6:	4631      	mov	r1, r6
 80043d8:	4622      	mov	r2, r4
 80043da:	f7ff ff27 	bl	800422c <memcpy>
 80043de:	4631      	mov	r1, r6
 80043e0:	4638      	mov	r0, r7
 80043e2:	f000 f815 	bl	8004410 <_free_r>
 80043e6:	e7e9      	b.n	80043bc <_realloc_r+0x1c>
 80043e8:	4635      	mov	r5, r6
 80043ea:	e7e7      	b.n	80043bc <_realloc_r+0x1c>

080043ec <_sbrk_r>:
 80043ec:	b538      	push	{r3, r4, r5, lr}
 80043ee:	4c06      	ldr	r4, [pc, #24]	; (8004408 <_sbrk_r+0x1c>)
 80043f0:	2300      	movs	r3, #0
 80043f2:	4605      	mov	r5, r0
 80043f4:	4608      	mov	r0, r1
 80043f6:	6023      	str	r3, [r4, #0]
 80043f8:	f7fe f89a 	bl	8002530 <_sbrk>
 80043fc:	1c43      	adds	r3, r0, #1
 80043fe:	d102      	bne.n	8004406 <_sbrk_r+0x1a>
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	b103      	cbz	r3, 8004406 <_sbrk_r+0x1a>
 8004404:	602b      	str	r3, [r5, #0]
 8004406:	bd38      	pop	{r3, r4, r5, pc}
 8004408:	20000a7c 	.word	0x20000a7c

0800440c <__malloc_lock>:
 800440c:	4770      	bx	lr

0800440e <__malloc_unlock>:
 800440e:	4770      	bx	lr

08004410 <_free_r>:
 8004410:	b538      	push	{r3, r4, r5, lr}
 8004412:	4605      	mov	r5, r0
 8004414:	2900      	cmp	r1, #0
 8004416:	d045      	beq.n	80044a4 <_free_r+0x94>
 8004418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800441c:	1f0c      	subs	r4, r1, #4
 800441e:	2b00      	cmp	r3, #0
 8004420:	bfb8      	it	lt
 8004422:	18e4      	addlt	r4, r4, r3
 8004424:	f7ff fff2 	bl	800440c <__malloc_lock>
 8004428:	4a1f      	ldr	r2, [pc, #124]	; (80044a8 <_free_r+0x98>)
 800442a:	6813      	ldr	r3, [r2, #0]
 800442c:	4610      	mov	r0, r2
 800442e:	b933      	cbnz	r3, 800443e <_free_r+0x2e>
 8004430:	6063      	str	r3, [r4, #4]
 8004432:	6014      	str	r4, [r2, #0]
 8004434:	4628      	mov	r0, r5
 8004436:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800443a:	f7ff bfe8 	b.w	800440e <__malloc_unlock>
 800443e:	42a3      	cmp	r3, r4
 8004440:	d90c      	bls.n	800445c <_free_r+0x4c>
 8004442:	6821      	ldr	r1, [r4, #0]
 8004444:	1862      	adds	r2, r4, r1
 8004446:	4293      	cmp	r3, r2
 8004448:	bf04      	itt	eq
 800444a:	681a      	ldreq	r2, [r3, #0]
 800444c:	685b      	ldreq	r3, [r3, #4]
 800444e:	6063      	str	r3, [r4, #4]
 8004450:	bf04      	itt	eq
 8004452:	1852      	addeq	r2, r2, r1
 8004454:	6022      	streq	r2, [r4, #0]
 8004456:	6004      	str	r4, [r0, #0]
 8004458:	e7ec      	b.n	8004434 <_free_r+0x24>
 800445a:	4613      	mov	r3, r2
 800445c:	685a      	ldr	r2, [r3, #4]
 800445e:	b10a      	cbz	r2, 8004464 <_free_r+0x54>
 8004460:	42a2      	cmp	r2, r4
 8004462:	d9fa      	bls.n	800445a <_free_r+0x4a>
 8004464:	6819      	ldr	r1, [r3, #0]
 8004466:	1858      	adds	r0, r3, r1
 8004468:	42a0      	cmp	r0, r4
 800446a:	d10b      	bne.n	8004484 <_free_r+0x74>
 800446c:	6820      	ldr	r0, [r4, #0]
 800446e:	4401      	add	r1, r0
 8004470:	1858      	adds	r0, r3, r1
 8004472:	4282      	cmp	r2, r0
 8004474:	6019      	str	r1, [r3, #0]
 8004476:	d1dd      	bne.n	8004434 <_free_r+0x24>
 8004478:	6810      	ldr	r0, [r2, #0]
 800447a:	6852      	ldr	r2, [r2, #4]
 800447c:	605a      	str	r2, [r3, #4]
 800447e:	4401      	add	r1, r0
 8004480:	6019      	str	r1, [r3, #0]
 8004482:	e7d7      	b.n	8004434 <_free_r+0x24>
 8004484:	d902      	bls.n	800448c <_free_r+0x7c>
 8004486:	230c      	movs	r3, #12
 8004488:	602b      	str	r3, [r5, #0]
 800448a:	e7d3      	b.n	8004434 <_free_r+0x24>
 800448c:	6820      	ldr	r0, [r4, #0]
 800448e:	1821      	adds	r1, r4, r0
 8004490:	428a      	cmp	r2, r1
 8004492:	bf04      	itt	eq
 8004494:	6811      	ldreq	r1, [r2, #0]
 8004496:	6852      	ldreq	r2, [r2, #4]
 8004498:	6062      	str	r2, [r4, #4]
 800449a:	bf04      	itt	eq
 800449c:	1809      	addeq	r1, r1, r0
 800449e:	6021      	streq	r1, [r4, #0]
 80044a0:	605c      	str	r4, [r3, #4]
 80044a2:	e7c7      	b.n	8004434 <_free_r+0x24>
 80044a4:	bd38      	pop	{r3, r4, r5, pc}
 80044a6:	bf00      	nop
 80044a8:	200009f0 	.word	0x200009f0

080044ac <_malloc_usable_size_r>:
 80044ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044b0:	1f18      	subs	r0, r3, #4
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	bfbc      	itt	lt
 80044b6:	580b      	ldrlt	r3, [r1, r0]
 80044b8:	18c0      	addlt	r0, r0, r3
 80044ba:	4770      	bx	lr

080044bc <_init>:
 80044bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044be:	bf00      	nop
 80044c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044c2:	bc08      	pop	{r3}
 80044c4:	469e      	mov	lr, r3
 80044c6:	4770      	bx	lr

080044c8 <_fini>:
 80044c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ca:	bf00      	nop
 80044cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ce:	bc08      	pop	{r3}
 80044d0:	469e      	mov	lr, r3
 80044d2:	4770      	bx	lr
